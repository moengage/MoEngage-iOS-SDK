// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MoEngageMessaging
import Foundation
import MoEngageAnalytics
import MoEngageCore
@_exported import MoEngageMessaging
import MoEngageObjCUtils
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol MoEngageMessagingDelegate {
  @objc optional func notificationRegistered(withDeviceToken deviceToken: Swift.String)
  @objc optional func notificationReceived(withPushPayload userInfo: [Swift.AnyHashable : Any])
  @objc optional func notificationClicked(withPushPayload userInfo: [Swift.AnyHashable : Any])
  @objc optional func notificationClicked(withScreenName screenName: Swift.String?, andKVPairs kvPairs: [Swift.AnyHashable : Any]?)
  @objc optional func notificationClicked(withScreenName screenName: Swift.String?, kvPairs: [Swift.AnyHashable : Any]?, andPushPayload userInfo: [Swift.AnyHashable : Any])
}
@_inheritsConvenienceInitializers @objc public class MoEngageMessagingUtils : ObjectiveC.NSObject {
  public static func getStatsAttributes(fromPayloadDict payloadDict: [Swift.AnyHashable : Any]) -> [Swift.String : Any]
  public static func addEntryToInbox(payload: MoEngageMessaging.MoEngagePushPayload, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func fetchAppIdFromPushPayload(payload: [Swift.AnyHashable : Any]) -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
public class MoEngageMessageDelegateHandler : MoEngageCore.MoEngageMessagingHandler, MoEngageObjCUtils.MoEngageAppDelegateMessagingProxyProtocol, UserNotifications.UNUserNotificationCenterDelegate {
  override public func initializeMessaging(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc public func applicationDidRegisterForRemoteNotifications(withDeviceToken deviceToken: Foundation.Data?)
  @objc public func applicationDidFailToRegisterForRemoteNotificationsWithError(_ error: (any Swift.Error)?)
  @objc public func applicationDidReceiveRemoteNotification(_ userInfo: [Swift.AnyHashable : Any]?)
  @objc public func userNotificationCenterWillPresent(_ notification: UserNotifications.UNNotification?)
  @objc public func userNotificationCenterDidReceive(_ response: UserNotifications.UNNotificationResponse?)
  override public func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  override public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
public protocol MoEngageNotificationStateProtocol {
  static func notifyReceived(withPushPayload pushPayload: [Swift.AnyHashable : Any])
  static func notifyClicked(withPushPayload pushPayload: [Swift.AnyHashable : Any])
}
public enum MoEngagePushTemplateType {
  case StylizedBasic
  case ImageCarousel
  case Default
  public static func == (a: MoEngageMessaging.MoEngagePushTemplateType, b: MoEngageMessaging.MoEngagePushTemplateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class MoEngagePushRichExpandedMode {
  public var templateType: MoEngageMessaging.MoEngagePushTemplateType?
  public var autoStart: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var cards: [MoEngageMessaging.MoEngagePushCard]
  public init?(_ pushModeDict: [Swift.String : Any]) throws
  @objc deinit
}
public class MoEngagePushCard {
  public var id: Swift.Int?
  public var widgets: [MoEngageMessaging.MoEngagePushWidget]
  public init(_ pushCardDict: [Swift.String : Any]) throws
  @objc deinit
}
public enum MoEngagePushWidgetType {
  case Text
  case Button
  case Image
  case Unknown
  public static func == (a: MoEngageMessaging.MoEngagePushWidgetType, b: MoEngageMessaging.MoEngagePushWidgetType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class MoEngagePushWidget {
  public var type: MoEngageMessaging.MoEngagePushWidgetType?
  public var content: Swift.String?
  public init(_ widgetDict: [Swift.String : Any]) throws
  @objc deinit
}
public struct MoEngageMessagingConstants {
  public struct EventNames {
    public static let notificationShown: Swift.String
    public static let notificationScheduleFailed: Swift.String
    public static let notificationScheduleSuccess: Swift.String
    public static let notificationShownInOffline: Swift.String
  }
  public struct PushPayloadKeys {
    public static let aps: Swift.String
    public static let moengage: Swift.String
    public static let appExtra: Swift.String
    public struct ApsKeys {
      public static let alert: Swift.String
      public static let alertTitle: Swift.String
      public static let alertSubTitle: Swift.String
      public static let alertBody: Swift.String
      public static let sound: Swift.String
      public static let category: Swift.String
    }
    public struct MoEngageKeys {
      public static let silentPush: Swift.String
      public static let cid: Swift.String
      public static let appID: Swift.String
      public static let webUrl: Swift.String
      public static let couponCode: Swift.String
      public static let inboxExpiry: Swift.String
      public static let inAppDict: Swift.String
      public static let inAppV2: Swift.String
      public static let mediaType: Swift.String
      public static let mediaAttachment: Swift.String
      public static let isRead: Swift.String
      public static let receivedDate: Swift.String
      public static let clickedDate: Swift.String
    }
    public struct AppExtraKeys {
      public static let deeplink: Swift.String
      public static let screenName: Swift.String
      public static let customKVPairs: Swift.String
    }
    public struct MoEFeatureKeys {
      public static let id: Swift.String
      public static let actions: Swift.String
      public static let widgets: Swift.String
      public static let displayName: Swift.String
      public static let defaultActions: Swift.String
      public static let name: Swift.String
      public static let value: Swift.String
      public static let kvPairs: Swift.String
      public static let content: Swift.String
      public static let stylizedBasic: Swift.String
      public static let imageCarousel: Swift.String
      public static let moeFeatures: Swift.String
      public static let richPush: Swift.String
      public static let navigate: Swift.String
      public static let coupon: Swift.String
      public static let expanded: Swift.String
      public static let autoStart: Swift.String
      public static let cards: Swift.String
      public static let type: Swift.String
      public static let style: Swift.String
      public static let bgColor: Swift.String
    }
    public struct iOSDictKeys {
      public static let ios: Swift.String
      public static let category: Swift.String
      public static let sound: Swift.String
    }
    public struct ActionKeys {
      public static let deepLink: Swift.String
      public static let richLanding: Swift.String
      public static let screenName: Swift.String
    }
    public struct WidgetTypeKeys {
      public static let image: Swift.String
      public static let text: Swift.String
      public static let button: Swift.String
    }
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKMessaging : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageMessaging.MoEngageSDKMessaging
  @available(tvOS, unavailable)
  @objc public func registerForRemoteNotification(withCategories categories: Swift.Set<UserNotifications.UNNotificationCategory>? = nil, andUserNotificationCenterDelegate delegate: (any UserNotifications.UNUserNotificationCenterDelegate)? = nil)
  @available(tvOS, unavailable)
  @objc public func setUserNotificationCategories(_ categories: Swift.Set<UserNotifications.UNNotificationCategory>? = nil)
  @available(tvOS, unavailable)
  @objc public func disableBadgeReset()
  @available(tvOS, unavailable)
  @objc public func setMessagingDelegate(_ delegate: (any MoEngageMessaging.MoEngageMessagingDelegate)?)
  @available(tvOS, unavailable)
  @objc public func setMessagingDelegate(_ delegate: (any MoEngageMessaging.MoEngageMessagingDelegate)?, forAppID appID: Swift.String? = nil)
  @available(iOSApplicationExtension, unavailable)
  @available(tvOS, unavailable)
  @objc public func setPushToken(_ deviceToken: Foundation.Data?)
  @available(iOSApplicationExtension, unavailable)
  @available(tvOS, unavailable)
  @objc public func didFailToRegisterForPush()
  @available(iOSApplicationExtension, unavailable)
  @available(tvOS, unavailable)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification)
  @available(iOSApplicationExtension, unavailable)
  @available(tvOS, unavailable)
  @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse)
  @available(iOSApplicationExtension, unavailable)
  @available(tvOS, unavailable)
  @objc public func didReceieveNotification(inApplication application: UIKit.UIApplication? = nil, withInfo pushPayload: [Swift.AnyHashable : Any])
  @available(iOSApplicationExtension, unavailable)
  @available(tvOS, unavailable)
  @objc public func process(notificationPayload pushPayload: [Swift.AnyHashable : Any], forInstanceID instanceID: Swift.String)
  @available(tvOS, unavailable)
  @objc public func disableBadgeReset(_ disable: Swift.Bool)
  @available(tvOS, unavailable)
  @objc public static func isMoEngageSilentPushAppLaunch(withLaunchOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?) -> Swift.Bool
  @available(tvOS, unavailable)
  @objc public func logNotificationReceived(withPayload payload: [Swift.AnyHashable : Any])
  @available(iOSApplicationExtension, unavailable)
  @available(tvOS, unavailable)
  @objc public func logNotificationClicked(withPayload payload: [Swift.AnyHashable : Any])
  @available(tvOS, unavailable)
  @objc public func isPushFromMoEngage(withPayload payload: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc deinit
}
public class MoEngageRichPush {
  public var title: Swift.String?
  public var subTitle: Swift.String?
  public var body: Swift.String?
  public var templateDisplayName: Swift.String?
  public var category: Swift.String?
  public var sound: Swift.String?
  public var expandedMode: MoEngageMessaging.MoEngagePushRichExpandedMode?
  public var defaultActions: [MoEngageMessaging.MoEngagePushAction]
  public init(_ richPushDict: [Swift.String : Any]) throws
  @objc deinit
}
public class MoEngagePushPayload {
  public var pushPayload: [Swift.AnyHashable : Any]
  public var moengageDict: [Swift.String : Any]
  public var mediaAttachment: Swift.String?
  public var mediaType: Swift.String?
  public var richPush: MoEngageMessaging.MoEngageRichPush?
  public var appID: Swift.String
  public var formattedCID: Swift.String
  public var deeplinkUrl: Swift.String?
  public var screenName: Swift.String?
  public var richLandingUrl: Swift.String?
  public var couponCode: Swift.String?
  public var inAppV2CID: Swift.String?
  public var inAppV3Dict: [Swift.String : Any]?
  public var customKVPair: [Swift.String : Any]?
  public init(withPushPayload payload: [Swift.AnyHashable : Any]) throws
  @objc deinit
}
public enum MoEngageActionName {
  case Navigate
  case Coupon
  case Unknown
  public static func == (a: MoEngageMessaging.MoEngageActionName, b: MoEngageMessaging.MoEngageActionName) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MoEngageActionType {
  case RichLanding
  case DeepLinking
  case NavigateToScreen
  case Unknown
  public static func == (a: MoEngageMessaging.MoEngageActionType, b: MoEngageMessaging.MoEngageActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class MoEngagePushAction {
  public var actionName: MoEngageMessaging.MoEngageActionName?
  public var actionType: MoEngageMessaging.MoEngageActionType?
  public var value: Swift.String?
  public var kvPairs: [Swift.String : Any]?
  public init(_ actionDict: [Swift.String : Any]) throws
  @objc deinit
}
extension MoEngageMessaging.MoEngagePushTemplateType : Swift.Equatable {}
extension MoEngageMessaging.MoEngagePushTemplateType : Swift.Hashable {}
extension MoEngageMessaging.MoEngagePushWidgetType : Swift.Equatable {}
extension MoEngageMessaging.MoEngagePushWidgetType : Swift.Hashable {}
extension MoEngageMessaging.MoEngageActionName : Swift.Equatable {}
extension MoEngageMessaging.MoEngageActionName : Swift.Hashable {}
extension MoEngageMessaging.MoEngageActionType : Swift.Equatable {}
extension MoEngageMessaging.MoEngageActionType : Swift.Hashable {}
