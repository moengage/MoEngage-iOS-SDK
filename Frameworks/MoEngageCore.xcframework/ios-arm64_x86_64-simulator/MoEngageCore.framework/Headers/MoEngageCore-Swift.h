#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef MOENGAGECORE_SWIFT_H
#define MOENGAGECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import SafariServices;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoEngageCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Meta-data related to your MoEngage account.
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageAccountMeta")
@interface MoEngageAccountMeta : NSObject
/// Account identifier, APP ID on the MoEngage Dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull appID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create an instance of <code>MoEngageAccountMeta</code>
/// \param instanceID MoEngage account identifier.
/// :nodoc:
///
- (nonnull instancetype)initWithInstanceID:(NSString * _Nonnull)instanceID OBJC_DESIGNATED_INITIALIZER;
@end

@class NSUUID;

/// <code>AdSupport</code> bridge for accessing methods without import.
SWIFT_PROTOCOL("_TtP12MoEngageCore23MoEngageAdSupportBridge_")
@protocol MoEngageAdSupportBridge <NSObject>
+ (id _Nonnull)sharedManager SWIFT_WARN_UNUSED_RESULT;
- (NSUUID * _Nonnull)advertisingIdentifier SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAdvertisingTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore25MoEngageAnalyticsDelegate")
@interface MoEngageAnalyticsDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MoEngageSDKInstance;

/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageAnalyticsManager")
@interface MoEngageAnalyticsManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageAnalyticsManager * _Nonnull sharedInstance;)
+ (MoEngageAnalyticsManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeAnalyticsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)moengageSDKStateUpdatedWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidBecomeActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillResignActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterBackgroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)flushWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)resetDataAfterUnRegistrationWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)syncExistingDataBeforeUnRegisterationWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance withCompletionBlock:(void (^ _Nullable)(BOOL))completionBlock;
@end


/// <code>AppTrackingTransparency</code> bridge for accessing methods without import.
SWIFT_PROTOCOL("_TtP12MoEngageCore37MoEngageAppTrackingTransparencyBridge_")
@protocol MoEngageAppTrackingTransparencyBridge <NSObject>
+ (NSUInteger)trackingAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12MoEngageCore22MoEngageAsyncOperation")
@interface MoEngageAsyncOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)start;
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageCardsHandler")
@interface MoEngageCardsHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageCardsManager")
@interface MoEngageCardsManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCardsManager * _Nonnull sharedInstance;)
+ (MoEngageCardsManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeCardsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillBecomeInActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

@class MoEngageSDKConfig;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore25MoEngageConfigCoordinator")
@interface MoEngageConfigCoordinator : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageConfigCoordinator * _Nonnull sharedInstance;)
+ (MoEngageConfigCoordinator * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)getSdkInstanceForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig withCompletionHandler:(void (^ _Nonnull)(MoEngageSDKInstance * _Nullable))completionHandler;
- (void)applicationEnteredForeground;
- (void)getSdkInstance:(NSString * _Nullable)instanceId completionHandler:(void (^ _Nonnull)(MoEngageSDKInstance * _Nullable))completionHandler;
- (void)getDefaultSdkInstance:(void (^ _Nonnull)(MoEngageSDKInstance * _Nullable))completionHandler;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageConfigDelegate")
@interface MoEngageConfigDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageConfigDelegateHandler")
@interface MoEngageConfigDelegateHandler : MoEngageConfigDelegate
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MoEngageLoggerType : NSInteger;

/// Model class to enable console logging and logLevel
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageConsoleLogConfig")
@interface MoEngageConsoleLogConfig : NSObject
/// Bool to enable/disable console logging
@property (nonatomic, readonly) BOOL isLoggingEnabled;
/// MoEngageLoggerType to enable console logging of ‘loglevel’ type and above.
@property (nonatomic, readonly) enum MoEngageLoggerType loglevel;
/// Initialize instance of MoEngageConsoleLogConfig
/// \param isLoggingEnabled Bool value to enable/disable console logs.
///
/// \param loglevel <code>MoEngageLoggerType</code> to enable console logging of ‘loglevel’ type and above.
///
- (nonnull instancetype)initWithIsLoggingEnabled:(BOOL)isLoggingEnabled loglevel:(enum MoEngageLoggerType)loglevel OBJC_DESIGNATED_INITIALIZER;
/// Returns instance of type <code>MoEngageConsoleLogConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageConsoleLogConfig</code> with console logging disabled and logLevel as info.
/// :nodoc:
+ (MoEngageConsoleLogConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageCoreCache")
@interface MoEngageCoreCache : NSObject
@property (nonatomic) BOOL isSegmentInitialized;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MoEngageSDKState : NSInteger;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageCoreHandler")
@interface MoEngageCoreHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCoreHandler * _Nonnull sharedInstance;)
+ (MoEngageCoreHandler * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull globalQueue;)
+ (dispatch_queue_t _Nonnull)globalQueue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeModuleWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance sdkState:(enum MoEngageSDKState)sdkState;
- (void)initializeInstanceWithSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig isDefaultInstance:(BOOL)isDefaultInstance withCompletionBlock:(void (^ _Nonnull)(MoEngageSDKInstance * _Nullable))completion;
- (MoEngageSDKConfig * _Nullable)getDefaultSDKConfiguration SWIFT_WARN_UNUSED_RESULT;
- (MoEngageSDKConfig * _Nullable)getSDKConfigForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MoEngageSDKConfig *> * _Nonnull)getAllSDKConfigs SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSDKEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)updateSDKStateWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance sdkState:(BOOL)sdkState;
- (void)enableSDKWithAppId:(NSString * _Nullable)appId;
- (void)disableSDKWithAppId:(NSString * _Nullable)appId;
- (BOOL)isSDKEnabledForInstanceWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (void)dismissRichLandingWebViewControllerWithAnimation:(BOOL)animate;
@end

@class MoEngageIntegrationInfo;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageCoreIntegrator")
@interface MoEngageCoreIntegrator : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCoreIntegrator * _Nonnull sharedInstance;)
+ (MoEngageCoreIntegrator * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)addIntergrationInfoWithInfo:(MoEngageIntegrationInfo * _Nonnull)info appId:(NSString * _Nullable)appId;
- (void)getCoreCache:(MoEngageSDKInstance * _Nonnull)sdkInstance completionHandler:(void (^ _Nonnull)(MoEngageCoreCache * _Nonnull))completionHandler;
- (void)enableSDKForSegmentWithInstanceID:(NSString * _Nonnull)instanceID;
@end

@class UIViewController;
@class NSURL;
@class UIApplication;
enum MoEngageInAppWhiteList : NSInteger;
enum MoEngageRegistrationState : NSInteger;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageCoreUtils")
@interface MoEngageCoreUtils : NSObject
+ (NSInteger)getMaxParallelInstancesSupported SWIFT_WARN_UNUSED_RESULT;
+ (MoEngageSDKConfig * _Nullable)getSDKInstanceForInstanceID:(NSString * _Nullable)instanceID SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSDKLibraryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getInstanceRootDirectoryPathForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDocumentsDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (void)removeFileAtPath:(NSString * _Nonnull)path sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
+ (UIViewController * _Nullable)getTopMostViewController SWIFT_WARN_UNUSED_RESULT;
+ (void)showAlertViewWithMessage:(NSString * _Nonnull)msg andTitle:(NSString * _Nonnull)title;
+ (void)openDeeplinkWithUrlString:(NSString * _Nullable)urlStr SWIFT_AVAILABILITY(ios_app_extension,unavailable);
+ (void)openExternalBrowserWithUrlString:(NSString * _Nullable)urlStr;
+ (NSURL * _Nullable)getUrlFromString:(NSString * _Nullable)urlStr SWIFT_WARN_UNUSED_RESULT;
+ (void)openDeeplinkWithUrl:(NSURL * _Nullable)url SWIFT_AVAILABILITY(ios_app_extension,unavailable);
+ (void)openRichLandingWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openRichLandingWithUrl:(NSURL * _Nullable)url;
+ (NSString * _Nonnull)getMoEngageSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getMainTargetAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppBundleId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getIDFV SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModel SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceOSVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelType SWIFT_WARN_UNUSED_RESULT;
+ (void)savePushTokenWithToken:(NSString * _Nonnull)token sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
+ (NSString * _Nullable)getPushTokenWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getSDKUniqueIdForInstanceWithConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)generateSDKUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isSdkEnabledForInstanceWithConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (enum MoEngageSDKState)fetchMoEngageSDKState:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAnalyticsEnabledWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserDefaultWithSDKState:(BOOL)isSDKEnabled forSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig;
+ (void)updateSDKState:(BOOL)isEnabled withConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig;
+ (BOOL)isDataTrackingEnabledForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)setDataTrackingOptOutStatusForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig optOutStatus:(BOOL)optOutStatus;
+ (UIApplication * _Nullable)sharedUIApplication SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isAppInBackground;)
+ (BOOL)isAppInBackground SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsAppInBackground:(BOOL)value;
+ (void)setIDFAOptOutStatusForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig optOutStatus:(BOOL)optOutStatus;
+ (void)setIDFVOptOutStatusForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig optOutStatus:(BOOL)optOutStatus;
+ (BOOL)isIDFATrackingEnabledForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isIDFVTrackingEnabledForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (MoEngageAccountMeta * _Nonnull)getAccountMetaWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getStringRepresentationWithEvent:(enum MoEngageInAppWhiteList)event SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isUserRegisteredWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserRegisterStateWithState:(enum MoEngageRegistrationState)state sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Geneartes SHA256 hash string from input string.
/// \param input The string to be hashed.
///
///
/// returns:
/// SHA256 hashed string.
+ (NSString * _Nonnull)generateHashValueFrom:(NSString * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Data-center to which the moengage data should flow.
typedef SWIFT_ENUM(NSInteger, MoEngageDataCenter, open) {
  MoEngageDataCenterData_center_default = 0,
  MoEngageDataCenterData_center_01 = 1,
  MoEngageDataCenterData_center_02 = 2,
  MoEngageDataCenterData_center_03 = 3,
  MoEngageDataCenterData_center_04 = 4,
  MoEngageDataCenterData_center_05 = 5,
  MoEngageDataCenterData_center_100 = 6,
};

@class NSDateFormatter;
@class NSDate;
@class NSDateComponents;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageDateUtils")
@interface MoEngageDateUtils : NSObject
+ (NSDateFormatter * _Nullable)dateFormatterForFormat:(NSString * _Nullable)format andforGMT:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForUsPosixLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForDeviceLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 sameAsDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 laterToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 earlierToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDateLaterToCurrentTime:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkDateInRange:(NSDate * _Nullable)dateToEvaluate fromStartDate:(NSDate * _Nullable)startDate toEndDate:(NSDate * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkTimeInRange:(NSDateComponents * _Nonnull)timeToEvaluate fromStartTime:(NSDateComponents * _Nonnull)startTime toEndTime:(NSDateComponents * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getGMTtimeEpochForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getLocalTimeForEventsPayloadForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateByAddingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateBySubtractingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDateComponents * _Nullable)getDateComponentsFromTimeString:(NSString * _Nullable)timeString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringInDeviceLocaleForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getDateForString:(NSString * _Nullable)str withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageDelayedOperation")
@interface MoEngageDelayedOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isConcurrent) BOOL concurrent;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)start;
- (void)main;
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MoEngageDelayedOperation (SWIFT_EXTENSION(MoEngageCore))
@end


SWIFT_CLASS_NAMED("Continuation")
@interface MoEngageDelayedOperationContinuation : NSObject
- (void)fulfill;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageDelayedOperationManager")
@interface MoEngageDelayedOperationManager : NSObject
- (nonnull instancetype)initWithNamed:(NSString * _Nonnull)name forInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance OBJC_DESIGNATED_INITIALIZER;
- (void)scheduleWithId:(NSString * _Nonnull)id withDelay:(double)delay performingAction:(void (^ _Nonnull)(MoEngageDelayedOperationContinuation * _Nonnull))action cancellation:(void (^ _Nonnull)(void))cancellation;
- (BOOL)isAlreadyScheduledForId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)cancelAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to implement user default
/// note:
/// This class is used for internal purpose.
/// :nodoc:
SWIFT_PROTOCOL("_TtP12MoEngageCore20MoEngageUserDefaults_")
@protocol MoEngageUserDefaults
/// Set string to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setStringWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Fetch string from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the string associated with the specified key.
- (NSString * _Nullable)getStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Set Integer to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setIntegerWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
/// Fetch Int from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the string associated with the specified key.
- (NSInteger)getIntegerWithKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Set boolean to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setBooleanWithKey:(NSString * _Nonnull)key value:(BOOL)value;
/// Fetch Boolean from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the boolean associated with the specified key.
- (BOOL)getBooleanWithKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Set double to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setDoubleWithKey:(NSString * _Nonnull)key value:(double)value;
/// Fetch double from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the double associated with the specified key.
- (double)getDoubleWithKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Set float to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setFloatWithKey:(NSString * _Nonnull)key value:(float)value;
/// Fetch float from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the float associated with the specified key.
- (float)getFloatWithKey:(NSString * _Nonnull)key defaultValue:(float)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Check if the specified key present in UserDefaults
/// \param key A key in the current user‘s defaults database.
///
///
/// returns:
/// true if key is present else false
- (BOOL)hasKeyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Remove the entry from database
/// \param key The key with which to associate the value.
///
- (void)removeKeyWithKey:(NSString * _Nonnull)key;
/// Remove the entry from database
/// \param key The key with which to associate the value.
///
- (id _Nullable)objectWithKey:(NSString * _Nonnull)key defaultValue:(id _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setWithValue:(id _Nonnull)value key:(NSString * _Nonnull)key;
/// Method to synchronize UserDefault.
/// note:
/// Donot use this method as it might be deprecated in future.
- (void)synchronise;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore37MoEngageEncryptedStandardUserDefaults")
@interface MoEngageEncryptedStandardUserDefaults : NSObject <MoEngageUserDefaults>
- (void)setStringWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (NSString * _Nullable)getStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setIntegerWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
- (NSInteger)getIntegerWithKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setBooleanWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (BOOL)getBooleanWithKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setDoubleWithKey:(NSString * _Nonnull)key value:(double)value;
- (double)getDoubleWithKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setFloatWithKey:(NSString * _Nonnull)key value:(float)value;
- (float)getFloatWithKey:(NSString * _Nonnull)key defaultValue:(float)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasKeyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)removeKeyWithKey:(NSString * _Nonnull)key;
- (void)synchronise;
- (id _Nullable)objectWithKey:(NSString * _Nonnull)key defaultValue:(id _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setWithValue:(id _Nonnull)value key:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore22MoEngageEventCondition")
@interface MoEngageEventCondition : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageEventConditionEvaluator")
@interface MoEngageEventConditionEvaluator : NSObject
- (nonnull instancetype)initWithEventName:(NSString * _Nonnull)name andConditionDict:(NSDictionary<NSString *, id> * _Nonnull)conditionDict OBJC_DESIGNATED_INITIALIZER;
- (BOOL)checkConditionSatisfiedForEvent:(NSString * _Nonnull)event andAttributesPayload:(NSDictionary<NSString *, id> * _Nonnull)attributesPayload SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore29MoEngageGeneralAsyncOperation")
@interface MoEngageGeneralAsyncOperation : MoEngageAsyncOperation
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageGeofenceHandler")
@interface MoEngageGeofenceHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageGeofenceManager")
@interface MoEngageGeofenceManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageGeofenceManager * _Nonnull sharedInstance;)
+ (MoEngageGeofenceManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeGeofenceWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)moengageSDKStateUpdatedWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

@class UIImageView;

/// :nodoc:
SWIFT_PROTOCOL("_TtP12MoEngageCore19MoEngageGifDelegate_")
@protocol MoEngageGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender url:(NSURL * _Nonnull)url error:(NSError * _Nullable)error;
@end


/// Class to configure the InApp.
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageInAppConfig")
@interface MoEngageInAppConfig : NSObject
/// Inset value for nudge placement
@property (nonatomic, readonly) CGFloat safeAreaInset;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageInAppManager")
@interface MoEngageInAppManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageInAppManager * _Nonnull sharedInstance;)
+ (MoEngageInAppManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInAppWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageInAppWhiteList, open) {
  MoEngageInAppWhiteListInAppShown = 0,
  MoEngageInAppWhiteListInAppClicked = 1,
  MoEngageInAppWhiteListInAppDismissed = 2,
  MoEngageInAppWhiteListInAppAutoDismissed = 3,
  MoEngageInAppWhiteListInAppRating = 4,
};


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore21MoEngageInboxDelegate")
@interface MoEngageInboxDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageInboxManager")
@interface MoEngageInboxManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageInboxManager * _Nonnull sharedInstance;)
+ (MoEngageInboxManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInboxWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageIntegrationInfo")
@interface MoEngageIntegrationInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationType;
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationVersion;
- (nonnull instancetype)initWithPluginType:(NSString * _Nonnull)pluginType version:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model to set the keychain configuration
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageKeyChainConfig")
@interface MoEngageKeyChainConfig : NSObject
/// Keychain group name to save the encryption key in keychain
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
/// Returns the instance of type <code>MoEngageKeyChainConfig</code>  with default configuration
///
/// returns:
/// Instance of type <code>MoEngageKeyChainConfig</code>
/// :nodoc:
+ (MoEngageKeyChainConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of <code>MoEngageKeyChainConfig</code>
/// \param groupName Keychain sharing name as set in Capabilities.
///
- (nonnull instancetype)initWithGroupName:(NSString * _Nonnull)groupName OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageLifeCycleEventHandler")
@interface MoEngageLifeCycleEventHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageLifeCycleEventHandler * _Nonnull sharedInstance;)
+ (MoEngageLifeCycleEventHandler * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore14MoEngageLogger")
@interface MoEngageLogger : NSObject
- (nonnull instancetype)initWithSdkInstanceTag:(NSString * _Nonnull)sdkInstanceTag OBJC_DESIGNATED_INITIALIZER;
/// Method for logging instance specific logs.
/// \param logLevel <code>MoEngageLoggerType</code> to log the information with provided ‘logLevel’ value. Defaults to <code>.verbose</code>.
///
/// \param message The message to log of <code>String</code> type.
///
/// \param stackTrace An optional array of <code>String</code> representing the stack trace to be sent to backend when remote logging.
///
/// \param label Optional <code>String</code> to add the module tag if required.
///
/// \param shouldLogContext Bool value to enable/disable context. Defaults to <code>true</code>.
///
/// \param file The file name where the log message was called.
///
/// \param method The method name where the log message was called.
/// :nodoc:
///
- (void)logWithLogLevel:(enum MoEngageLoggerType)logLevel message:(NSString * _Nonnull)message stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label shouldLogContext:(BOOL)shouldLogContext file:(NSString * _Nonnull)file method:(NSString * _Nonnull)method;
/// Method for logging default (not instance specific)  logs.
/// \param logLevel <code>MoEngageLoggerType</code> to log the information with provided ‘logLevel’ value. Defaults to <code>.verbose</code>.
///
/// \param message The message to log of <code>String</code> type.
///
/// \param stackTrace An optional array of <code>String</code> representing the stack trace to be sent to backend when remote logging.
///
/// \param label Optional <code>String</code> to add the module tag if required.
///
/// \param shouldLogContext Bool value to enable/disable context. Defaults to <code>true</code>.
///
/// \param file The file name where the log message was called.
///
/// \param method The method name where the log message was called.
/// :nodoc:
///
+ (void)logDefaultWithLogLevel:(enum MoEngageLoggerType)logLevel message:(NSString * _Nonnull)message stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label shouldLogContext:(BOOL)shouldLogContext file:(NSString * _Nonnull)file method:(NSString * _Nonnull)method;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageLoggerType, open) {
  MoEngageLoggerTypeVerbose = 0,
  MoEngageLoggerTypeDebug = 1,
  MoEngageLoggerTypeInfo = 2,
  MoEngageLoggerTypeWarning = 3,
  MoEngageLoggerTypeError = 4,
};


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageMessagingHandler")
@interface MoEngageMessagingHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageMessagingManager")
@interface MoEngageMessagingManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageMessagingManager * _Nonnull sharedInstance;)
+ (MoEngageMessagingManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeMessagingWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)logoutWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end


/// Configuration Related to Network Request Authorization.
SWIFT_CLASS("_TtC12MoEngageCore34MoEngageNetworkAuthorizationConfig")
@interface MoEngageNetworkAuthorizationConfig : NSObject
/// Jwt Configuration, if true all Network Request will be authenticated with jwt token
@property (nonatomic, readonly) BOOL isJwtEnbaled;
/// Initialize the instance of type <code>MoEngageNetworkAuthorizationConfig</code>
/// \param isJwtEnbaled Pass true to enable to authenticate all API calls with jwt token
///
- (nonnull instancetype)initWithIsJwtEnbaled:(BOOL)isJwtEnbaled OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of MoEngageNetworkAuthorizationConfig with default configuration
///
/// returns:
/// Instance of MoEngageNetworkAuthorizationConfig with jwt disabled
/// :nodoc:
+ (MoEngageNetworkAuthorizationConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Prints the description of <code>MoEngageNetworkAuthorizationConfig</code>
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageNetworkConfiguration")
@interface MoEngageNetworkConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API Data Encryption Configuration
SWIFT_CLASS("_TtC12MoEngageCore33MoEngageNetworkDataSecurityConfig")
@interface MoEngageNetworkDataSecurityConfig : NSObject
/// If true sdk will encrypt all data in the API Request.
@property (nonatomic, readonly) BOOL isEncryptionEnabled;
/// Encryption Key which will be use to encrypt/decrypt data in Debug mode
@property (nonatomic, copy) NSString * _Nonnull encryptionKeyDebug;
/// Encryption Key which will be use to encrypt/decrypt data in Release mode
@property (nonatomic, copy) NSString * _Nonnull encryptionKeyRelease;
/// Initialize the instance of MoEngageNetworkDataSecurityConfig
/// \param isEncryptionEnabled Pass true to enable the API encryption
///
/// \param encryptionKeyDebug Encryption Key which will be use to encrypt/decrypt data in Debug mode
///
/// \param encryptionKeyRelease Encryption Key which will be use to encrypt/decrypt data in Release mode
///
- (nonnull instancetype)initWithIsEncryptionEnabled:(BOOL)isEncryptionEnabled encryptionKeyDebug:(NSString * _Nonnull)encryptionKeyDebug encryptionKeyRelease:(NSString * _Nonnull)encryptionKeyRelease OBJC_DESIGNATED_INITIALIZER;
/// Prints the description of MoEngageNetworkDataSecurityConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns the instance of MoEngageNetworkDataSecurityConfig with default configuration
///
/// returns:
/// Instance of MoEngageNetworkDataSecurityConfig with encryption disabled
/// :nodoc:
+ (MoEngageNetworkDataSecurityConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MoEngageSSLVerificationConfig;

/// Configuration for Network Request
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageNetworkRequestConfig")
@interface MoEngageNetworkRequestConfig : NSObject
/// Configuration Related to Network Request Data Security.
@property (nonatomic, readonly, strong) MoEngageNetworkDataSecurityConfig * _Nonnull dataSecurityConfig;
/// Configuration Related to Network Request Authorization.
@property (nonatomic, readonly, strong) MoEngageNetworkAuthorizationConfig * _Nonnull authorizationConfig;
/// Configuration Related to SSL Pinning Validation.
@property (nonatomic, readonly, strong) MoEngageSSLVerificationConfig * _Nonnull sslVerificationConfig;
/// Returns instance of type <code>MoEngageNetworkRequestConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageNetworkRequestConfig</code> with all feature disabled.
/// :nodoc:
+ (MoEngageNetworkRequestConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param authorizationConfig Instance of type <code>MoEngageNetworkAuthorizationConfig</code>
///
/// \param dataSecurityConfig Instance of type <code>MoEngageNetworkDataSecurityConfig</code>
///
- (nonnull instancetype)initWithAuthorizationConfig:(MoEngageNetworkAuthorizationConfig * _Nonnull)authorizationConfig dataSecurityConfig:(MoEngageNetworkDataSecurityConfig * _Nonnull)dataSecurityConfig sslVerificationConfig:(MoEngageSSLVerificationConfig * _Nonnull)sslVerificationConfig OBJC_DESIGNATED_INITIALIZER;
/// Convinience initializer to create the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param authorizationConfig Instance of type <code>MoEngageNetworkAuthorizationConfig</code>
///
- (nonnull instancetype)initWithAuthorizationConfig:(MoEngageNetworkAuthorizationConfig * _Nonnull)authorizationConfig;
/// Convinience initializer to create the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param dataSecurityConfig Instance of type <code>MoEngageNetworkDataSecurityConfig</code>
///
- (nonnull instancetype)initWithDataSecurityConfig:(MoEngageNetworkDataSecurityConfig * _Nonnull)dataSecurityConfig;
/// Convinience initializer to create the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param sslVerificationConfig Instance of type <code>MoEngageSSLVerificationConfig</code>
///
- (nonnull instancetype)initWithSslVerificationConfig:(MoEngageSSLVerificationConfig * _Nonnull)sslVerificationConfig;
/// Prints the description of MoEngageNetworkRequestConfig instance
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageNetworkService, open) {
  MoEngageNetworkServiceGetConfig = 0,
  MoEngageNetworkServiceInitialize = 1,
  MoEngageNetworkServiceSendReports = 2,
  MoEngageNetworkServiceInAppMetaFetch = 3,
  MoEngageNetworkServiceInAppGetPayload = 4,
  MoEngageNetworkServiceInAppGetTestPayload = 5,
  MoEngageNetworkServiceInAppSendStats = 6,
  MoEngageNetworkServiceInboxFetch = 7,
  MoEngageNetworkServiceSendCategories = 8,
  MoEngageNetworkServiceRealTimeTriggersFetch = 9,
  MoEngageNetworkServiceCheckUserInSegment = 10,
  MoEngageNetworkServiceGeofenceHit = 11,
  MoEngageNetworkServiceGeofencesFetch = 12,
  MoEngageNetworkServiceCardsFetch = 13,
  MoEngageNetworkServiceCardsDelete = 14,
  MoEngageNetworkServiceCardsUserActivity = 15,
  MoEngageNetworkServiceCrashLake = 16,
  MoEngageNetworkServiceRegister = 17,
  MoEngageNetworkServiceUnregister = 18,
};

@class NSURLSession;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

/// Stores session level delegates and propagates callbacks.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore35MoEngageNetworkSessionDelegateStore")
@interface MoEngageNetworkSessionDelegateStore : NSObject
/// Handles auth challenge callback form URLSession.
/// \param session The current session.
///
/// \param challenge The challenge recieved.
///
/// \param completionHandler The handling callback.
///
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Stores task delegates.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore32MoEngageNetworkTaskDelegateStore")
@interface MoEngageNetworkTaskDelegateStore : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageNetworkUtils")
@interface MoEngageNetworkUtils : NSObject
+ (NSDictionary<NSString *, id> * _Nonnull)getQueryParamsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance isV1ParamsRequired:(BOOL)isV1ParamsRequired SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDeviceUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Integration Partners for MoEngage SDK.
typedef SWIFT_ENUM(NSInteger, MoEngagePartnerIntegrationType, open) {
/// Integration Partner <a href="https://segment.com/">Segment</a>
  MoEngagePartnerIntegrationTypeSegment = 0,
};


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageRealTimeTriggerDelegate")
@interface MoEngageRealTimeTriggerDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageRealTimeTriggerManager")
@interface MoEngageRealTimeTriggerManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageRealTimeTriggerManager * _Nonnull sharedInstance;)
+ (MoEngageRealTimeTriggerManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeRTTWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillBecomeInActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

enum MoEngageRegistrationType : NSInteger;
enum MoEngageRegistrationResult : NSInteger;

/// User Registration Data
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageRegistrationData")
@interface MoEngageRegistrationData : NSObject
/// Account info
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// Enum indicating the User-registration type
@property (nonatomic, readonly) enum MoEngageRegistrationType type;
/// Enum indicating the User-registration state
@property (nonatomic, readonly) enum MoEngageRegistrationState state;
/// Enum indicating the User-registration  result.
@property (nonatomic, readonly) enum MoEngageRegistrationResult result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Registration API result.
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationResult, open) {
/// Sucess if the register/unregister API is successful
  MoEngageRegistrationResultSuccess = 0,
/// Failure if the register/unregister API is fails
  MoEngageRegistrationResultFailure = 1,
};

/// :nodoc:
/// User Registration Result states
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationState, open) {
/// User is Registered
  MoEngageRegistrationStateRegistered = 0,
/// User is Unregistered
  MoEngageRegistrationStateUnregistered = 1,
/// The User Registration flow has to be enabled at the time of MoEngage SDK initialization to register the user. Use  <code>MoEngageUserRegistrationConfig</code> to enable user registration
  MoEngageRegistrationStateFlowNotEnabled = 2,
/// State when <code>MoEngageSDKCore.unregisterUser</code> is called without successfully registering the user using <code>MoEngageSDKCore.registerUser</code>.
  MoEngageRegistrationStateUserNotRegistered = 3,
/// State when passed data is invalid
  MoEngageRegistrationStateInvalidData = 4,
/// State when account is blocked or sdk is disabled
  MoEngageRegistrationStateSdkOrAccountDisabled = 5,
};

/// User registration type
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationType, open) {
/// Register the user
  MoEngageRegistrationTypeRegister = 0,
/// UnRegister the user.
  MoEngageRegistrationTypeUnregister = 1,
};


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageRemoteAnalyticsConfig")
@interface MoEngageRemoteAnalyticsConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;

SWIFT_CLASS("_TtC12MoEngageCore20MoEngageRemoteConfig")
@interface MoEngageRemoteConfig : NSObject <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MoEngageRemoteModuleStatus;
@class MoEngageRemoteInAppConfig;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore27MoEngageRemoteConfiguration")
@interface MoEngageRemoteConfiguration : NSObject
@property (nonatomic, readonly) BOOL isAppEnabled;
@property (nonatomic, readonly, strong) MoEngageRemoteModuleStatus * _Nonnull moduleStatus;
@property (nonatomic, readonly, strong) MoEngageRemoteInAppConfig * _Nonnull inAppConfig;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore32MoEngageRemoteDataTrackingConfig")
@interface MoEngageRemoteDataTrackingConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore25MoEngageRemoteInAppConfig")
@interface MoEngageRemoteInAppConfig : NSObject
@property (nonatomic, readonly) BOOL isStatsEnabled;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageRemoteLogConfig")
@interface MoEngageRemoteLogConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore26MoEngageRemoteModuleStatus")
@interface MoEngageRemoteModuleStatus : NSObject
@property (nonatomic, readonly) BOOL isInAppEnabled;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore35MoEngageRemoteRealTimeTriggerConfig")
@interface MoEngageRemoteRealTimeTriggerConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageRemoteSecurityConfig")
@interface MoEngageRemoteSecurityConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MoEngageStorageConfig;
@class MoEngageUserRegistrationConfig;

/// MoEngage SDK Configuration class
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageSDKConfig")
@interface MoEngageSDKConfig : NSObject
/// Account identifier, APP ID on the MoEngage Dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Set the data-center to which the data should flow.
@property (nonatomic) enum MoEngageDataCenter moeDataCenter;
/// Set the App group id to share the data between app target and extensions
@property (nonatomic, copy) NSString * _Nonnull appGroupID;
/// Interval at which events are flushed to MoEngage backend. Minimum value is 60.
@property (nonatomic) NSInteger analyticsPeriodicFlushDuration;
/// Bool to disable to periodic flush of events.
@property (nonatomic) BOOL analyticsDisablePeriodicFlush;
/// Use formattedAppId to differentiate appId in debug/live build
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedAppId;
/// True if instance is default/primary instance else false
/// :nodoc:
@property (nonatomic, readonly) BOOL isDefaultInstance;
/// True if instance in running in Debug environment else false
/// :nodoc:
@property (nonatomic, readonly) BOOL isTestEnvironment;
/// Configuration for InApp Campaigns.
@property (nonatomic, strong) MoEngageInAppConfig * _Nonnull inAppConfig;
/// Configuration for SDK Storage
@property (nonatomic, strong) MoEngageStorageConfig * _Nonnull storageConfig;
/// Configuration for storing the items in keychain
@property (nonatomic, strong) MoEngageKeyChainConfig * _Nonnull keyChainConfig;
/// Configuration for User Registration
@property (nonatomic, strong) MoEngageUserRegistrationConfig * _Nonnull userRegistrationConfig;
/// Configuration for Network Request.
@property (nonatomic, strong) MoEngageNetworkRequestConfig * _Nonnull networkConfig;
/// Configuration for Console Log
@property (nonatomic, strong) MoEngageConsoleLogConfig * _Nonnull consoleLogConfig;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize instance of MoEngageSDKConfig
/// \param appId Account identifier, APP ID on the MoEngage Dashboard.
///
/// \param dataCenter The dashboard on which you have created your account.
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId dataCenter:(enum MoEngageDataCenter)dataCenter OBJC_DESIGNATED_INITIALIZER;
/// Initialize instance of MoEngageSDKConfig
/// \param appID Account identifier
/// :nodoc:
///
- (nonnull instancetype)initWithAppID:(NSString * _Nonnull)appID SWIFT_DEPRECATED_MSG("This method is deprecated in favour of constructor with data center parameter. This constructor would be removed in version 11.0.0 version of the SDK.");
/// Update the MoEngageSDKConfig properties if it belongs to test environment
/// :nodoc:
- (void)updateConfigForTestEnvironment;
/// Set the partner integration type
/// \param integrationType Enum of type <code>MoEngagePartnerIntegrationType</code>
/// :nodoc:
///
- (void)setPartnerIntegrationTypeWithIntegrationType:(enum MoEngagePartnerIntegrationType)integrationType;
/// Print the description of MoEngageSDKConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC12MoEngageCore23MoEngageSDKConfigEntity")
@interface MoEngageSDKConfigEntity : NSObject <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MoEngageUserRegistrationStatus;
@class MoEngageUserInformation;

SWIFT_CLASS("_TtC12MoEngageCore15MoEngageSDKCore")
@interface MoEngageSDKCore : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageSDKCore * _Nonnull sharedInstance;)
+ (MoEngageSDKCore * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Register the user
/// \param data JWT token
///
/// \param completionHandler returns the status of registration data
///
- (void)registerUserWithData:(NSString * _Nonnull)data completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// Register the user for Secondary instance
/// \param data JWT token
///
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns the status of registration data
///
- (void)registerUserWithData:(NSString * _Nonnull)data appId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// UnRegister the User
/// note:
/// This API should be called only if user is registered successfully at some point using registerUser
/// \param data JWT token
///
/// \param completionHandler returns the status of Unregistration data
///
- (void)unregisterUserWithData:(NSString * _Nonnull)data completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// UnRegister the User for Secondary instance
/// note:
/// This API should be called only if user is registered successfully at some point using registerUser
/// \param data JWT token
///
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns the status of Unregistration data
///
- (void)unregisterUserWithData:(NSString * _Nonnull)data appId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// Check if User has registered
/// \param completionHandler true if  user is registered else false
///
- (void)getUserRegistrationStatusWithCompletionHandler:(void (^ _Nonnull)(MoEngageUserRegistrationStatus * _Nonnull))completionHandler;
/// Check if User has registered for Secondary instance
/// \param appId MoEngage Account identifier
///
/// \param completionHandler true if  user is registered else false
///
- (void)getUserRegistrationStatusForAppId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageUserRegistrationStatus * _Nonnull))completionHandler;
/// Fetches unique ID generated by the MoEngage SDK.
/// \param completionHandler returns UUID generated by the MoEngage SDK
///
- (void)getMoEngageDeviceIdWithCompletionHandler:(void (^ _Nonnull)(MoEngageUserInformation * _Nonnull))completionHandler;
/// Fetches unique ID generated by the MoEngage SDK for Secondary instance
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns UUID generated by the MoEngage SDK
///
- (void)getMoEngageDeviceIdWithAppId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageUserInformation * _Nonnull))completionHandler;
/// API to enable the common logs  which are not specific to any AppId.
- (void)enableAllLogs;
/// API to disable the common logs  which are not specific to any AppId.
- (void)disableAllLogs;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageSDKInstance")
@interface MoEngageSDKInstance : NSObject
@property (nonatomic, strong) MoEngageSDKConfig * _Nonnull sdkConfig;
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull sdkQueue;
@property (nonatomic, readonly, strong) MoEngageLogger * _Nonnull logger;
- (void)updateRemoteConfig:(MoEngageRemoteConfiguration * _Nonnull)config;
- (MoEngageRemoteConfiguration * _Nonnull)getRemoteConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Enum to set the SDK State
typedef SWIFT_ENUM(NSInteger, MoEngageSDKState, open) {
/// To enable the SDK
  MoEngageSDKStateEnabled = 0,
/// To disable the SDK
  MoEngageSDKStateDisabled = 1,
};


SWIFT_CLASS("_TtC12MoEngageCore22MoEngageSDKStateHelper")
@interface MoEngageSDKStateHelper : NSObject
/// Returns the current state of the SDK, i.e. whether it is enabled or disabled.
/// \param appID MoEngage Account Identifier
///
/// \param completion Returns true if SDK is enabled else false
///
+ (void)isSDKEnabledWithAppID:(NSString * _Nullable)appID completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks if the SDK is initialised with given account identifier
/// \param appID MoEngage Account Identifier
///
/// \param completion Returns true if SDK is initialized else false
///
+ (void)isSDKInitializedWithAppID:(NSString * _Nullable)appID completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks if the SDK is initialised with default account
/// \param completion Returns true if SDK is initialized else false
///
+ (void)isSDKInitialized:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// :nodoc:
/// A configuration type to support SSL pinning validation.
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageSSLVerificationConfig")
@interface MoEngageSSLVerificationConfig : NSObject
/// Keeps track if SSL Verification enabled, if true all Network Request
/// will be verified with certificate data provided.
@property (nonatomic, readonly) BOOL isEnabled;
/// Certificate data to use to perform validation
/// of server’s certificates.
@property (nonatomic, readonly, copy) NSData * _Nonnull certificateData;
/// Creates an instance of <code>MoEngageSSLVerificationConfig</code>
/// with provided configuration.
/// If pinning is enabled, the pinning configuration
/// and .certificate data is stored in UserDefaults.
/// \param isEnabled Whther SSL pinning will be enabled.
///
/// \param certificateData The certificate data that should match server’s certifacte.
///
- (nonnull instancetype)initWithIsEnabled:(BOOL)isEnabled certificateData:(NSData * _Nonnull)certificateData OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of <code>MoEngageSSLVerificationConfig</code>
/// with default configuration.
/// By default, pinning is disabled.
///
/// returns:
/// Instance of <code>MoEngageSSLVerificationConfig</code>.
+ (MoEngageSSLVerificationConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Store config data in UserDefaults
- (void)storeForSDKInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Returns the instance of <code>MoEngageSSLVerificationConfig</code>
/// with configuration stored in UserDefaults.
/// If configuration and certificate data is not present in UserDefaults
/// pinning is disabled.
///
/// returns:
/// Instance of <code>MoEngageSSLVerificationConfig</code>.
+ (MoEngageSSLVerificationConfig * _Nonnull)storedConfigForSDKInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that implements userdefault functionality.
/// note:
/// This class is used for internal purpose.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageStandardUserDefaults")
@interface MoEngageStandardUserDefaults : NSObject <MoEngageUserDefaults>
- (void)setStringWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (NSString * _Nullable)getStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setIntegerWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
- (NSInteger)getIntegerWithKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setBooleanWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (BOOL)getBooleanWithKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setDoubleWithKey:(NSString * _Nonnull)key value:(double)value;
- (double)getDoubleWithKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setFloatWithKey:(NSString * _Nonnull)key value:(float)value;
- (float)getFloatWithKey:(NSString * _Nonnull)key defaultValue:(float)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasKeyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)removeKeyWithKey:(NSString * _Nonnull)key;
- (void)synchronise;
- (id _Nullable)objectWithKey:(NSString * _Nonnull)key defaultValue:(id _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setWithValue:(id _Nonnull)value key:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MoEngageStorageEncryptionConfig;

/// Model class to support storage configuration
SWIFT_CLASS("_TtC12MoEngageCore21MoEngageStorageConfig")
@interface MoEngageStorageConfig : NSObject
/// Model responsible to enable storage encryption
@property (nonatomic, readonly, strong) MoEngageStorageEncryptionConfig * _Nonnull encryptionConfig;
/// Returns the instance of type <code>MoEngageStorageConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageStorageConfig</code>
/// :nodoc:
+ (MoEngageStorageConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize  the instance of MoEngageStorageConfig
/// \param encryptionConfig instance of type <code>MoEngageStorageEncryptionConfig</code>
///
- (nonnull instancetype)initWithEncryptionConfig:(MoEngageStorageEncryptionConfig * _Nonnull)encryptionConfig OBJC_DESIGNATED_INITIALIZER;
/// Print the description of <code>MoEngageStorageConfig</code>
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model class to support storage encryption
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageStorageEncryptionConfig")
@interface MoEngageStorageEncryptionConfig : NSObject
/// Set the value as true to enable storage encryption
@property (nonatomic) BOOL isEncryptionEnabled;
/// Initialize the instance of type <code>MoEngageStorageEncryptionConfig</code>
/// \param isEncryptionEnabled Pass true to enable storage encryption
///
- (nonnull instancetype)initWithIsEncryptionEnabled:(BOOL)isEncryptionEnabled OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of MoEngageStorageEncryptionConfig with default configuration
///
/// returns:
/// Instance of MoEngageStorageEncryptionConfig  where encryption is disabled
+ (MoEngageStorageEncryptionConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Prints the description of MoEngageStorageEncryptionConfig
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class to provide MoEngageStandardUserDefaults instance
/// note:
/// This class is used for internal purpose.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageStorageProvider")
@interface MoEngageStorageProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageStorageProvider * _Nonnull sharedInstance;)
+ (MoEngageStorageProvider * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// creates common UserDefaults
///
/// returns:
/// instance of type <code>MoEngageStandardUserDefaults</code>.
@property (nonatomic, strong) MoEngageStandardUserDefaults * _Nonnull commonUserDefault;
/// creates instance specific userdefault based on encryption status
/// \param sdkConfig <code>MoEngageSDKConfig</code> instance
///
///
/// returns:
/// UserDefault instance of type <code>MoEngageStandardUserDefaults</code>
- (id <MoEngageUserDefaults> _Nonnull)getUserDefaultWithSdkConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
- (id <MoEngageUserDefaults> _Nonnull)getUserDefaultForAppGroupIdWithSdkConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
@end



/// Model that returns User related information
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageUserInformation")
@interface MoEngageUserInformation : NSObject
/// User account related information
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// Unique id of the user.
@property (nonatomic, readonly, copy) NSString * _Nullable uniqueId;
- (nonnull instancetype)initWithAccountMeta:(MoEngageAccountMeta * _Nonnull)accountMeta uniqueId:(NSString * _Nullable)uniqueId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Registration Flow Configuration
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageUserRegistrationConfig")
@interface MoEngageUserRegistrationConfig : NSObject
/// Pass true to enable the user registration flow.
@property (nonatomic) BOOL isUserRegistrationEnabled;
/// Returns the instance of type <code>MoEngageUserRegistrationConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageUserRegistrationConfig</code>
/// :nodoc:
+ (MoEngageUserRegistrationConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of <code>MoEngageUserRegistrationConfig</code>
/// \param isUserRegistrationEnabled Pass true to enable the user registration flow else false.
///
- (nonnull instancetype)initWithIsUserRegistrationEnabled:(BOOL)isUserRegistrationEnabled OBJC_DESIGNATED_INITIALIZER;
/// Prints the description of MoEngageUserRegistrationConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model responsible for User registration status
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageUserRegistrationStatus")
@interface MoEngageUserRegistrationStatus : NSObject
/// User account related information
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// true if user is registered else false.
@property (nonatomic) BOOL isUserRegistered;
- (nonnull instancetype)initWithAccountMeta:(MoEngageAccountMeta * _Nonnull)accountMeta isUserRegistered:(BOOL)isUserRegistered OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SFSafariViewController;

SWIFT_CLASS("_TtC12MoEngageCore22MoEngageWebViewHandler")
@interface MoEngageWebViewHandler : NSObject <SFSafariViewControllerDelegate>
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17ValidateExtension")
@interface ValidateExtension : NSObject
+ (BOOL)isFromExtension SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef MOENGAGECORE_SWIFT_H
#define MOENGAGECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Dispatch;
@import Foundation;
@import ObjectiveC;
@import SafariServices;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MoEngageCore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// Meta-data related to your MoEngage account.
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageAccountMeta")
@interface MoEngageAccountMeta : NSObject
/// Account identifier, APP ID on the MoEngage Dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull appID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Create an instance of <code>MoEngageAccountMeta</code>
/// \param instanceID MoEngage account identifier.
/// :nodoc:
///
- (nonnull instancetype)initWithInstanceID:(NSString * _Nonnull)instanceID OBJC_DESIGNATED_INITIALIZER;
@end

@class NSUUID;

/// <code>AdSupport</code> bridge for accessing methods without import.
SWIFT_PROTOCOL("_TtP12MoEngageCore23MoEngageAdSupportBridge_")
@protocol MoEngageAdSupportBridge <NSObject>
+ (id _Nonnull)sharedManager SWIFT_WARN_UNUSED_RESULT;
- (NSUUID * _Nonnull)advertisingIdentifier SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAdvertisingTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore25MoEngageAnalyticsDelegate")
@interface MoEngageAnalyticsDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MoEngageSDKInstance;

/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageAnalyticsManager")
@interface MoEngageAnalyticsManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageAnalyticsManager * _Nonnull sharedInstance;)
+ (MoEngageAnalyticsManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeAnalyticsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)moengageSDKStateUpdatedWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidBecomeActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillResignActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterBackgroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)flushWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)resetDataAfterUnRegistrationWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)syncExistingDataBeforeUnRegisterationWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance withCompletionBlock:(void (^ _Nullable)(BOOL))completionBlock;
@end


/// <code>AppTrackingTransparency</code> bridge for accessing methods without import.
SWIFT_PROTOCOL("_TtP12MoEngageCore37MoEngageAppTrackingTransparencyBridge_")
@protocol MoEngageAppTrackingTransparencyBridge <NSObject>
+ (NSUInteger)trackingAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC12MoEngageCore22MoEngageAsyncOperation")
@interface MoEngageAsyncOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)start;
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageCardsHandler")
@interface MoEngageCardsHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageCardsManager")
@interface MoEngageCardsManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCardsManager * _Nonnull sharedInstance;)
+ (MoEngageCardsManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeCardsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillBecomeInActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

@class MoEngageSDKConfig;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore25MoEngageConfigCoordinator")
@interface MoEngageConfigCoordinator : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageConfigCoordinator * _Nonnull sharedInstance;)
+ (MoEngageConfigCoordinator * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)getSdkInstanceForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig withCompletionHandler:(void (^ _Nonnull)(MoEngageSDKInstance * _Nullable))completionHandler;
- (void)applicationEnteredForeground;
- (void)getSdkInstance:(NSString * _Nullable)instanceId completionHandler:(void (^ _Nonnull)(MoEngageSDKInstance * _Nullable))completionHandler;
- (void)getDefaultSdkInstance:(void (^ _Nonnull)(MoEngageSDKInstance * _Nullable))completionHandler;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageConfigDelegate")
@interface MoEngageConfigDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageConfigDelegateHandler")
@interface MoEngageConfigDelegateHandler : MoEngageConfigDelegate
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MoEngageLoggerType : NSInteger;

/// Model class to enable console logging and logLevel
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageConsoleLogConfig")
@interface MoEngageConsoleLogConfig : NSObject
/// Bool to enable/disable console logging
@property (nonatomic, readonly) BOOL isLoggingEnabled;
/// MoEngageLoggerType to enable console logging of ‘loglevel’ type and above.
@property (nonatomic, readonly) enum MoEngageLoggerType loglevel;
/// Initialize instance of MoEngageConsoleLogConfig
/// \param isLoggingEnabled Bool value to enable/disable console logs.
///
/// \param loglevel <code>MoEngageLoggerType</code> to enable console logging of ‘loglevel’ type and above.
///
- (nonnull instancetype)initWithIsLoggingEnabled:(BOOL)isLoggingEnabled loglevel:(enum MoEngageLoggerType)loglevel OBJC_DESIGNATED_INITIALIZER;
/// Returns instance of type <code>MoEngageConsoleLogConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageConsoleLogConfig</code> with console logging disabled and logLevel as info.
/// :nodoc:
+ (MoEngageConsoleLogConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageCoreCache")
@interface MoEngageCoreCache : NSObject
@property (nonatomic) BOOL isSegmentInitialized;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum MoEngageSDKState : NSInteger;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageCoreHandler")
@interface MoEngageCoreHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCoreHandler * _Nonnull sharedInstance;)
+ (MoEngageCoreHandler * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) dispatch_queue_t _Nonnull globalQueue;)
+ (dispatch_queue_t _Nonnull)globalQueue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeModuleWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance sdkState:(enum MoEngageSDKState)sdkState;
- (void)initializeInstanceWithSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig isDefaultInstance:(BOOL)isDefaultInstance withCompletionBlock:(void (^ _Nonnull)(MoEngageSDKInstance * _Nullable))completion;
- (MoEngageSDKConfig * _Nullable)getDefaultSDKConfiguration SWIFT_WARN_UNUSED_RESULT;
- (MoEngageSDKConfig * _Nullable)getSDKConfigForAppID:(NSString * _Nonnull)appID SWIFT_WARN_UNUSED_RESULT;
- (NSArray<MoEngageSDKConfig *> * _Nonnull)getAllSDKConfigs SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSDKEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)updateSDKStateWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance sdkState:(BOOL)sdkState;
- (void)enableSDKWithAppId:(NSString * _Nullable)appId;
- (void)disableSDKWithAppId:(NSString * _Nullable)appId;
- (BOOL)isSDKEnabledForInstanceWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (void)dismissRichLandingWebViewControllerWithAnimation:(BOOL)animate;
@end

@class MoEngageIntegrationInfo;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageCoreIntegrator")
@interface MoEngageCoreIntegrator : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageCoreIntegrator * _Nonnull sharedInstance;)
+ (MoEngageCoreIntegrator * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)addIntergrationInfoWithInfo:(MoEngageIntegrationInfo * _Nonnull)info appId:(NSString * _Nullable)appId;
- (void)getCoreCache:(MoEngageSDKInstance * _Nonnull)sdkInstance completionHandler:(void (^ _Nonnull)(MoEngageCoreCache * _Nonnull))completionHandler;
- (void)enableSDKForSegmentWithInstanceID:(NSString * _Nonnull)instanceID;
@end

@class UIViewController;
@class NSURL;
@class UIApplication;
enum MoEngageInAppWhiteList : NSInteger;
enum MoEngageRegistrationState : NSInteger;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageCoreUtils")
@interface MoEngageCoreUtils : NSObject
+ (NSInteger)getMaxParallelInstancesSupported SWIFT_WARN_UNUSED_RESULT;
+ (MoEngageSDKConfig * _Nullable)getSDKInstanceForInstanceID:(NSString * _Nullable)instanceID SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSDKLibraryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getInstanceRootDirectoryPathForIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDocumentsDirectoryPath SWIFT_WARN_UNUSED_RESULT;
+ (void)removeFileAtPath:(NSString * _Nonnull)path sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
+ (UIViewController * _Nullable)getTopMostViewController SWIFT_WARN_UNUSED_RESULT;
+ (void)showAlertViewWithMessage:(NSString * _Nonnull)msg andTitle:(NSString * _Nonnull)title;
+ (void)openDeeplinkWithUrlString:(NSString * _Nullable)urlStr SWIFT_AVAILABILITY(ios_app_extension,unavailable);
+ (void)openExternalBrowserWithUrlString:(NSString * _Nullable)urlStr;
+ (NSURL * _Nullable)getUrlFromString:(NSString * _Nullable)urlStr SWIFT_WARN_UNUSED_RESULT;
+ (void)openDeeplinkWithUrl:(NSURL * _Nullable)url SWIFT_AVAILABILITY(ios_app_extension,unavailable);
+ (void)openRichLandingWithUrlString:(NSString * _Nullable)urlStr;
+ (void)openRichLandingWithUrl:(NSURL * _Nullable)url;
+ (NSString * _Nonnull)getMoEngageSDKVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getMainTargetAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getAppBundleId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getIDFV SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModel SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceOSVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelName SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDeviceModelType SWIFT_WARN_UNUSED_RESULT;
+ (void)savePushTokenWithToken:(NSString * _Nonnull)token sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
+ (NSString * _Nullable)getPushTokenWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getSDKUniqueIdForInstanceWithConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)generateSDKUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isSdkEnabledForInstanceWithConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (enum MoEngageSDKState)fetchMoEngageSDKState:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAnalyticsEnabledWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserDefaultWithSDKState:(BOOL)isSDKEnabled forSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig;
+ (void)updateSDKState:(BOOL)isEnabled withConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig;
+ (BOOL)isDataTrackingEnabledForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (void)setDataTrackingOptOutStatusForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig optOutStatus:(BOOL)optOutStatus;
+ (UIApplication * _Nullable)sharedUIApplication SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL isAppInBackground;)
+ (BOOL)isAppInBackground SWIFT_WARN_UNUSED_RESULT;
+ (void)setIsAppInBackground:(BOOL)value;
+ (void)setIDFAOptOutStatusForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig optOutStatus:(BOOL)optOutStatus;
+ (void)setIDFVOptOutStatusForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig optOutStatus:(BOOL)optOutStatus;
+ (BOOL)isIDFATrackingEnabledForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isIDFVTrackingEnabledForSDKConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
+ (MoEngageAccountMeta * _Nonnull)getAccountMetaWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getStringRepresentationWithEvent:(enum MoEngageInAppWhiteList)event SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isUserRegisteredWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserRegisterStateWithState:(enum MoEngageRegistrationState)state sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Geneartes SHA256 hash string from input string.
/// \param input The string to be hashed.
///
///
/// returns:
/// SHA256 hashed string.
+ (NSString * _Nonnull)generateHashValueFrom:(NSString * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Data-center to which the moengage data should flow.
typedef SWIFT_ENUM(NSInteger, MoEngageDataCenter, open) {
  MoEngageDataCenterData_center_default = 0,
  MoEngageDataCenterData_center_01 = 1,
  MoEngageDataCenterData_center_02 = 2,
  MoEngageDataCenterData_center_03 = 3,
  MoEngageDataCenterData_center_04 = 4,
  MoEngageDataCenterData_center_05 = 5,
  MoEngageDataCenterData_center_100 = 6,
};

@class NSDateFormatter;
@class NSDate;
@class NSDateComponents;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageDateUtils")
@interface MoEngageDateUtils : NSObject
+ (NSDateFormatter * _Nullable)dateFormatterForFormat:(NSString * _Nullable)format andforGMT:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForUsPosixLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nullable)dateFormatterForDeviceLocaleWithFormat:(NSString * _Nonnull)format forGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 sameAsDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 laterToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDate1:(NSDate * _Nonnull)date1 earlierToDate2:(NSDate * _Nonnull)date2 SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDateLaterToCurrentTime:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkDateInRange:(NSDate * _Nullable)dateToEvaluate fromStartDate:(NSDate * _Nullable)startDate toEndDate:(NSDate * _Nullable)endDate SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)checkTimeInRange:(NSDateComponents * _Nonnull)timeToEvaluate fromStartTime:(NSDateComponents * _Nonnull)startTime toEndTime:(NSDateComponents * _Nonnull)endTime SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getGMTtimeEpochForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getLocalTimeForEventsPayloadForDate:(NSDate * _Nullable)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateByAddingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)dateBySubtractingDays:(NSUInteger)days toDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSDateComponents * _Nullable)getDateComponentsFromTimeString:(NSString * _Nullable)timeString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getStringInDeviceLocaleForDate:(NSDate * _Nullable)date withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getDateForString:(NSString * _Nullable)str withFormat:(NSString * _Nullable)format andForGMTTimeZone:(BOOL)isGMTtz SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageDelayedOperation")
@interface MoEngageDelayedOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isConcurrent) BOOL concurrent;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)start;
- (void)main;
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MoEngageDelayedOperation (SWIFT_EXTENSION(MoEngageCore))
@end


SWIFT_CLASS_NAMED("Continuation")
@interface MoEngageDelayedOperationContinuation : NSObject
- (void)fulfill;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageDelayedOperationManager")
@interface MoEngageDelayedOperationManager : NSObject
- (nonnull instancetype)initWithNamed:(NSString * _Nonnull)name forInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance OBJC_DESIGNATED_INITIALIZER;
- (void)scheduleWithId:(NSString * _Nonnull)id withDelay:(double)delay performingAction:(void (^ _Nonnull)(MoEngageDelayedOperationContinuation * _Nonnull))action cancellation:(void (^ _Nonnull)(void))cancellation;
- (BOOL)isAlreadyScheduledForId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (void)cancelAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to implement user default
/// note:
/// This class is used for internal purpose.
/// :nodoc:
SWIFT_PROTOCOL("_TtP12MoEngageCore20MoEngageUserDefaults_")
@protocol MoEngageUserDefaults
/// Set string to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setStringWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Fetch string from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the string associated with the specified key.
- (NSString * _Nullable)getStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Set Integer to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setIntegerWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
/// Fetch Int from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the string associated with the specified key.
- (NSInteger)getIntegerWithKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Set boolean to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setBooleanWithKey:(NSString * _Nonnull)key value:(BOOL)value;
/// Fetch Boolean from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the boolean associated with the specified key.
- (BOOL)getBooleanWithKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Set double to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setDoubleWithKey:(NSString * _Nonnull)key value:(double)value;
/// Fetch double from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the double associated with the specified key.
- (double)getDoubleWithKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Set float to UserDefaults
/// \param key The key with which to associate the value.
///
/// \param value The object to store in the defaults database.
///
- (void)setFloatWithKey:(NSString * _Nonnull)key value:(float)value;
/// Fetch float from UserDefaults
/// \param key A key in the current user‘s defaults database.
///
/// \param defaultValue default value if key is not present
///
///
/// returns:
/// Returns the float associated with the specified key.
- (float)getFloatWithKey:(NSString * _Nonnull)key defaultValue:(float)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// Check if the specified key present in UserDefaults
/// \param key A key in the current user‘s defaults database.
///
///
/// returns:
/// true if key is present else false
- (BOOL)hasKeyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Remove the entry from database
/// \param key The key with which to associate the value.
///
- (void)removeKeyWithKey:(NSString * _Nonnull)key;
/// Remove the entry from database
/// \param key The key with which to associate the value.
///
- (id _Nullable)objectWithKey:(NSString * _Nonnull)key defaultValue:(id _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setWithValue:(id _Nonnull)value key:(NSString * _Nonnull)key;
/// Method to synchronize UserDefault.
/// note:
/// Donot use this method as it might be deprecated in future.
- (void)synchronise;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore37MoEngageEncryptedStandardUserDefaults")
@interface MoEngageEncryptedStandardUserDefaults : NSObject <MoEngageUserDefaults>
- (void)setStringWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (NSString * _Nullable)getStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setIntegerWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
- (NSInteger)getIntegerWithKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setBooleanWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (BOOL)getBooleanWithKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setDoubleWithKey:(NSString * _Nonnull)key value:(double)value;
- (double)getDoubleWithKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setFloatWithKey:(NSString * _Nonnull)key value:(float)value;
- (float)getFloatWithKey:(NSString * _Nonnull)key defaultValue:(float)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasKeyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)removeKeyWithKey:(NSString * _Nonnull)key;
- (void)synchronise;
- (id _Nullable)objectWithKey:(NSString * _Nonnull)key defaultValue:(id _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setWithValue:(id _Nonnull)value key:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore22MoEngageEventCondition")
@interface MoEngageEventCondition : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageEventConditionEvaluator")
@interface MoEngageEventConditionEvaluator : NSObject
- (nonnull instancetype)initWithEventName:(NSString * _Nonnull)name andConditionDict:(NSDictionary<NSString *, id> * _Nonnull)conditionDict OBJC_DESIGNATED_INITIALIZER;
- (BOOL)checkConditionSatisfiedForEvent:(NSString * _Nonnull)event andAttributesPayload:(NSDictionary<NSString *, id> * _Nonnull)attributesPayload SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC12MoEngageCore29MoEngageGeneralAsyncOperation")
@interface MoEngageGeneralAsyncOperation : MoEngageAsyncOperation
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageGeofenceHandler")
@interface MoEngageGeofenceHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageGeofenceManager")
@interface MoEngageGeofenceManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageGeofenceManager * _Nonnull sharedInstance;)
+ (MoEngageGeofenceManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeGeofenceWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)moengageSDKStateUpdatedWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

@class UIImageView;

/// :nodoc:
SWIFT_PROTOCOL("_TtP12MoEngageCore19MoEngageGifDelegate_")
@protocol MoEngageGifDelegate
@optional
- (void)gifDidStartWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidLoopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifDidStopWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFinishWithSender:(UIImageView * _Nonnull)sender;
- (void)gifURLDidFailWithSender:(UIImageView * _Nonnull)sender url:(NSURL * _Nonnull)url error:(NSError * _Nullable)error;
@end


/// Class to configure the InApp.
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageInAppConfig")
@interface MoEngageInAppConfig : NSObject
/// Inset value for nudge placement
@property (nonatomic, readonly) CGFloat safeAreaInset;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageInAppManager")
@interface MoEngageInAppManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageInAppManager * _Nonnull sharedInstance;)
+ (MoEngageInAppManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInAppWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageInAppWhiteList, open) {
  MoEngageInAppWhiteListInAppShown = 0,
  MoEngageInAppWhiteListInAppClicked = 1,
  MoEngageInAppWhiteListInAppDismissed = 2,
  MoEngageInAppWhiteListInAppAutoDismissed = 3,
  MoEngageInAppWhiteListInAppRating = 4,
};


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore21MoEngageInboxDelegate")
@interface MoEngageInboxDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageInboxManager")
@interface MoEngageInboxManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageInboxManager * _Nonnull sharedInstance;)
+ (MoEngageInboxManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeInboxWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageIntegrationInfo")
@interface MoEngageIntegrationInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationType;
@property (nonatomic, readonly, copy) NSString * _Nonnull integrationVersion;
- (nonnull instancetype)initWithPluginType:(NSString * _Nonnull)pluginType version:(NSString * _Nonnull)version OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model to set the keychain configuration
SWIFT_CLASS("_TtC12MoEngageCore22MoEngageKeyChainConfig")
@interface MoEngageKeyChainConfig : NSObject
/// Keychain group name to save the encryption key in keychain
@property (nonatomic, readonly, copy) NSString * _Nonnull groupName;
/// Returns the instance of type <code>MoEngageKeyChainConfig</code>  with default configuration
///
/// returns:
/// Instance of type <code>MoEngageKeyChainConfig</code>
/// :nodoc:
+ (MoEngageKeyChainConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of <code>MoEngageKeyChainConfig</code>
/// \param groupName Keychain sharing name as set in Capabilities.
///
- (nonnull instancetype)initWithGroupName:(NSString * _Nonnull)groupName OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageLifeCycleEventHandler")
@interface MoEngageLifeCycleEventHandler : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageLifeCycleEventHandler * _Nonnull sharedInstance;)
+ (MoEngageLifeCycleEventHandler * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore14MoEngageLogger")
@interface MoEngageLogger : NSObject
- (nonnull instancetype)initWithSdkInstanceTag:(NSString * _Nonnull)sdkInstanceTag OBJC_DESIGNATED_INITIALIZER;
/// Method for logging instance specific logs.
/// \param logLevel <code>MoEngageLoggerType</code> to log the information with provided ‘logLevel’ value. Defaults to <code>.verbose</code>.
///
/// \param message The message to log of <code>String</code> type.
///
/// \param stackTrace An optional array of <code>String</code> representing the stack trace to be sent to backend when remote logging.
///
/// \param label Optional <code>String</code> to add the module tag if required.
///
/// \param shouldLogContext Bool value to enable/disable context. Defaults to <code>true</code>.
///
/// \param file The file name where the log message was called.
///
/// \param method The method name where the log message was called.
/// :nodoc:
///
- (void)logWithLogLevel:(enum MoEngageLoggerType)logLevel message:(NSString * _Nonnull)message stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label shouldLogContext:(BOOL)shouldLogContext file:(NSString * _Nonnull)file method:(NSString * _Nonnull)method;
/// Method for logging default (not instance specific)  logs.
/// \param logLevel <code>MoEngageLoggerType</code> to log the information with provided ‘logLevel’ value. Defaults to <code>.verbose</code>.
///
/// \param message The message to log of <code>String</code> type.
///
/// \param stackTrace An optional array of <code>String</code> representing the stack trace to be sent to backend when remote logging.
///
/// \param label Optional <code>String</code> to add the module tag if required.
///
/// \param shouldLogContext Bool value to enable/disable context. Defaults to <code>true</code>.
///
/// \param file The file name where the log message was called.
///
/// \param method The method name where the log message was called.
/// :nodoc:
///
+ (void)logDefaultWithLogLevel:(enum MoEngageLoggerType)logLevel message:(NSString * _Nonnull)message stackTrace:(NSArray<NSString *> * _Nullable)stackTrace label:(NSString * _Nullable)label shouldLogContext:(BOOL)shouldLogContext file:(NSString * _Nonnull)file method:(NSString * _Nonnull)method;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageLoggerType, open) {
  MoEngageLoggerTypeVerbose = 0,
  MoEngageLoggerTypeDebug = 1,
  MoEngageLoggerTypeInfo = 2,
  MoEngageLoggerTypeWarning = 3,
  MoEngageLoggerTypeError = 4,
};


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageMessagingHandler")
@interface MoEngageMessagingHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageMessagingManager")
@interface MoEngageMessagingManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageMessagingManager * _Nonnull sharedInstance;)
+ (MoEngageMessagingManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeMessagingWithLaunchOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions sdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)logoutWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end


/// Configuration Related to Network Request Authorization.
SWIFT_CLASS("_TtC12MoEngageCore34MoEngageNetworkAuthorizationConfig")
@interface MoEngageNetworkAuthorizationConfig : NSObject
/// Jwt Configuration, if true all Network Request will be authenticated with jwt token
@property (nonatomic, readonly) BOOL isJwtEnbaled;
/// Initialize the instance of type <code>MoEngageNetworkAuthorizationConfig</code>
/// \param isJwtEnbaled Pass true to enable to authenticate all API calls with jwt token
///
- (nonnull instancetype)initWithIsJwtEnbaled:(BOOL)isJwtEnbaled OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of MoEngageNetworkAuthorizationConfig with default configuration
///
/// returns:
/// Instance of MoEngageNetworkAuthorizationConfig with jwt disabled
/// :nodoc:
+ (MoEngageNetworkAuthorizationConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Prints the description of <code>MoEngageNetworkAuthorizationConfig</code>
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageNetworkConfiguration")
@interface MoEngageNetworkConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API Data Encryption Configuration
SWIFT_CLASS("_TtC12MoEngageCore33MoEngageNetworkDataSecurityConfig")
@interface MoEngageNetworkDataSecurityConfig : NSObject
/// If true sdk will encrypt all data in the API Request.
@property (nonatomic, readonly) BOOL isEncryptionEnabled;
/// Encryption Key which will be use to encrypt/decrypt data in Debug mode
@property (nonatomic, copy) NSString * _Nonnull encryptionKeyDebug;
/// Encryption Key which will be use to encrypt/decrypt data in Release mode
@property (nonatomic, copy) NSString * _Nonnull encryptionKeyRelease;
/// Initialize the instance of MoEngageNetworkDataSecurityConfig
/// \param isEncryptionEnabled Pass true to enable the API encryption
///
/// \param encryptionKeyDebug Encryption Key which will be use to encrypt/decrypt data in Debug mode
///
/// \param encryptionKeyRelease Encryption Key which will be use to encrypt/decrypt data in Release mode
///
- (nonnull instancetype)initWithIsEncryptionEnabled:(BOOL)isEncryptionEnabled encryptionKeyDebug:(NSString * _Nonnull)encryptionKeyDebug encryptionKeyRelease:(NSString * _Nonnull)encryptionKeyRelease OBJC_DESIGNATED_INITIALIZER;
/// Prints the description of MoEngageNetworkDataSecurityConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Returns the instance of MoEngageNetworkDataSecurityConfig with default configuration
///
/// returns:
/// Instance of MoEngageNetworkDataSecurityConfig with encryption disabled
/// :nodoc:
+ (MoEngageNetworkDataSecurityConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MoEngageSSLVerificationConfig;

/// Configuration for Network Request
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageNetworkRequestConfig")
@interface MoEngageNetworkRequestConfig : NSObject
/// Configuration Related to Network Request Data Security.
@property (nonatomic, readonly, strong) MoEngageNetworkDataSecurityConfig * _Nonnull dataSecurityConfig;
/// Configuration Related to Network Request Authorization.
@property (nonatomic, readonly, strong) MoEngageNetworkAuthorizationConfig * _Nonnull authorizationConfig;
/// Configuration Related to SSL Pinning Validation.
@property (nonatomic, readonly, strong) MoEngageSSLVerificationConfig * _Nonnull sslVerificationConfig;
/// Returns instance of type <code>MoEngageNetworkRequestConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageNetworkRequestConfig</code> with all feature disabled.
/// :nodoc:
+ (MoEngageNetworkRequestConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param authorizationConfig Instance of type <code>MoEngageNetworkAuthorizationConfig</code>
///
/// \param dataSecurityConfig Instance of type <code>MoEngageNetworkDataSecurityConfig</code>
///
- (nonnull instancetype)initWithAuthorizationConfig:(MoEngageNetworkAuthorizationConfig * _Nonnull)authorizationConfig dataSecurityConfig:(MoEngageNetworkDataSecurityConfig * _Nonnull)dataSecurityConfig sslVerificationConfig:(MoEngageSSLVerificationConfig * _Nonnull)sslVerificationConfig OBJC_DESIGNATED_INITIALIZER;
/// Convinience initializer to create the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param authorizationConfig Instance of type <code>MoEngageNetworkAuthorizationConfig</code>
///
- (nonnull instancetype)initWithAuthorizationConfig:(MoEngageNetworkAuthorizationConfig * _Nonnull)authorizationConfig;
/// Convinience initializer to create the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param dataSecurityConfig Instance of type <code>MoEngageNetworkDataSecurityConfig</code>
///
- (nonnull instancetype)initWithDataSecurityConfig:(MoEngageNetworkDataSecurityConfig * _Nonnull)dataSecurityConfig;
/// Convinience initializer to create the instance of type <code>MoEngageNetworkRequestConfig</code>
/// \param sslVerificationConfig Instance of type <code>MoEngageSSLVerificationConfig</code>
///
- (nonnull instancetype)initWithSslVerificationConfig:(MoEngageSSLVerificationConfig * _Nonnull)sslVerificationConfig;
/// Prints the description of MoEngageNetworkRequestConfig instance
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// :nodoc:
typedef SWIFT_ENUM(NSInteger, MoEngageNetworkService, open) {
  MoEngageNetworkServiceGetConfig = 0,
  MoEngageNetworkServiceInitialize = 1,
  MoEngageNetworkServiceSendReports = 2,
  MoEngageNetworkServiceInAppMetaFetch = 3,
  MoEngageNetworkServiceInAppGetPayload = 4,
  MoEngageNetworkServiceInAppGetTestPayload = 5,
  MoEngageNetworkServiceInAppSendStats = 6,
  MoEngageNetworkServiceInboxFetch = 7,
  MoEngageNetworkServiceSendCategories = 8,
  MoEngageNetworkServiceRealTimeTriggersFetch = 9,
  MoEngageNetworkServiceCheckUserInSegment = 10,
  MoEngageNetworkServiceGeofenceHit = 11,
  MoEngageNetworkServiceGeofencesFetch = 12,
  MoEngageNetworkServiceCardsFetch = 13,
  MoEngageNetworkServiceCardsDelete = 14,
  MoEngageNetworkServiceCardsUserActivity = 15,
  MoEngageNetworkServiceCrashLake = 16,
  MoEngageNetworkServiceRegister = 17,
  MoEngageNetworkServiceUnregister = 18,
};

@class NSURLSession;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;

/// Stores session level delegates and propagates callbacks.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore35MoEngageNetworkSessionDelegateStore")
@interface MoEngageNetworkSessionDelegateStore : NSObject
/// Handles auth challenge callback form URLSession.
/// \param session The current session.
///
/// \param challenge The challenge recieved.
///
/// \param completionHandler The handling callback.
///
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Stores task delegates.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore32MoEngageNetworkTaskDelegateStore")
@interface MoEngageNetworkTaskDelegateStore : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore20MoEngageNetworkUtils")
@interface MoEngageNetworkUtils : NSObject
+ (NSDictionary<NSString *, id> * _Nonnull)getQueryParamsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance isV1ParamsRequired:(BOOL)isV1ParamsRequired SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getDeviceUniqueID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isDeviceUniqueIDPresentInKeyChain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Integration Partners for MoEngage SDK.
typedef SWIFT_ENUM(NSInteger, MoEngagePartnerIntegrationType, open) {
/// Integration Partner <a href="https://segment.com/">Segment</a>
  MoEngagePartnerIntegrationTypeSegment = 0,
};


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageRealTimeTriggerDelegate")
@interface MoEngageRealTimeTriggerDelegate : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for internal purpose. Do not use any of the methods explicitly.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageRealTimeTriggerManager")
@interface MoEngageRealTimeTriggerManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageRealTimeTriggerManager * _Nonnull sharedInstance;)
+ (MoEngageRealTimeTriggerManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)initializeRTTWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationDidEnterForegroundWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)applicationWillBecomeInActiveWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromPreviousVersionsWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
- (void)migrateDataFromNoNEncryptionToEncryptionWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance currentSDKInstance:(MoEngageSDKInstance * _Nonnull)currentSDKInstance;
- (void)removeEncryptedFolderWithSdkInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
@end

enum MoEngageRegistrationType : NSInteger;
enum MoEngageRegistrationResult : NSInteger;

/// User Registration Data
SWIFT_CLASS("_TtC12MoEngageCore24MoEngageRegistrationData")
@interface MoEngageRegistrationData : NSObject
/// Account info
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// Enum indicating the User-registration type
@property (nonatomic, readonly) enum MoEngageRegistrationType type;
/// Enum indicating the User-registration state
@property (nonatomic, readonly) enum MoEngageRegistrationState state;
/// Enum indicating the User-registration  result.
@property (nonatomic, readonly) enum MoEngageRegistrationResult result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Registration API result.
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationResult, open) {
/// Sucess if the register/unregister API is successful
  MoEngageRegistrationResultSuccess = 0,
/// Failure if the register/unregister API is fails
  MoEngageRegistrationResultFailure = 1,
};

/// :nodoc:
/// User Registration Result states
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationState, open) {
/// User is Registered
  MoEngageRegistrationStateRegistered = 0,
/// User is Unregistered
  MoEngageRegistrationStateUnregistered = 1,
/// The User Registration flow has to be enabled at the time of MoEngage SDK initialization to register the user. Use  <code>MoEngageUserRegistrationConfig</code> to enable user registration
  MoEngageRegistrationStateFlowNotEnabled = 2,
/// State when <code>MoEngageSDKCore.unregisterUser</code> is called without successfully registering the user using <code>MoEngageSDKCore.registerUser</code>.
  MoEngageRegistrationStateUserNotRegistered = 3,
/// State when passed data is invalid
  MoEngageRegistrationStateInvalidData = 4,
/// State when account is blocked or sdk is disabled
  MoEngageRegistrationStateSdkOrAccountDisabled = 5,
};

/// User registration type
typedef SWIFT_ENUM(NSInteger, MoEngageRegistrationType, open) {
/// Register the user
  MoEngageRegistrationTypeRegister = 0,
/// UnRegister the user.
  MoEngageRegistrationTypeUnregister = 1,
};


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageRemoteAnalyticsConfig")
@interface MoEngageRemoteAnalyticsConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;

SWIFT_CLASS("_TtC12MoEngageCore20MoEngageRemoteConfig")
@interface MoEngageRemoteConfig : NSObject <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)encoder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MoEngageRemoteModuleStatus;
@class MoEngageRemoteInAppConfig;

/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore27MoEngageRemoteConfiguration")
@interface MoEngageRemoteConfiguration : NSObject
@property (nonatomic, readonly) BOOL isAppEnabled;
@property (nonatomic, readonly, strong) MoEngageRemoteModuleStatus * _Nonnull moduleStatus;
@property (nonatomic, readonly, strong) MoEngageRemoteInAppConfig * _Nonnull inAppConfig;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore32MoEngageRemoteDataTrackingConfig")
@interface MoEngageRemoteDataTrackingConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore25MoEngageRemoteInAppConfig")
@interface MoEngageRemoteInAppConfig : NSObject
@property (nonatomic, readonly) BOOL isStatsEnabled;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageRemoteLogConfig")
@interface MoEngageRemoteLogConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore26MoEngageRemoteModuleStatus")
@interface MoEngageRemoteModuleStatus : NSObject
@property (nonatomic, readonly) BOOL isInAppEnabled;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore35MoEngageRemoteRealTimeTriggerConfig")
@interface MoEngageRemoteRealTimeTriggerConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageRemoteSecurityConfig")
@interface MoEngageRemoteSecurityConfig : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MoEngageStorageConfig;
@class MoEngageUserRegistrationConfig;

/// MoEngage SDK Configuration class
SWIFT_CLASS("_TtC12MoEngageCore17MoEngageSDKConfig")
@interface MoEngageSDKConfig : NSObject
/// Account identifier, APP ID on the MoEngage Dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Set the data-center to which the data should flow.
@property (nonatomic) enum MoEngageDataCenter moeDataCenter;
/// Set the App group id to share the data between app target and extensions
@property (nonatomic, copy) NSString * _Nonnull appGroupID;
/// Interval at which events are flushed to MoEngage backend. Minimum value is 60.
@property (nonatomic) NSInteger analyticsPeriodicFlushDuration;
/// Bool to disable to periodic flush of events.
@property (nonatomic) BOOL analyticsDisablePeriodicFlush;
/// Use formattedAppId to differentiate appId in debug/live build
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull formattedAppId;
/// True if instance is default/primary instance else false
/// :nodoc:
@property (nonatomic, readonly) BOOL isDefaultInstance;
/// True if instance in running in Debug environment else false
/// :nodoc:
@property (nonatomic, readonly) BOOL isTestEnvironment;
/// Configuration for InApp Campaigns.
@property (nonatomic, strong) MoEngageInAppConfig * _Nonnull inAppConfig;
/// Configuration for SDK Storage
@property (nonatomic, strong) MoEngageStorageConfig * _Nonnull storageConfig;
/// Configuration for storing the items in keychain
@property (nonatomic, strong) MoEngageKeyChainConfig * _Nonnull keyChainConfig;
/// Configuration for User Registration
@property (nonatomic, strong) MoEngageUserRegistrationConfig * _Nonnull userRegistrationConfig;
/// Configuration for Network Request.
@property (nonatomic, strong) MoEngageNetworkRequestConfig * _Nonnull networkConfig;
/// Configuration for Console Log
@property (nonatomic, strong) MoEngageConsoleLogConfig * _Nonnull consoleLogConfig;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize instance of MoEngageSDKConfig
/// \param appId Account identifier, APP ID on the MoEngage Dashboard.
///
/// \param dataCenter The dashboard on which you have created your account.
///
- (nonnull instancetype)initWithAppId:(NSString * _Nonnull)appId dataCenter:(enum MoEngageDataCenter)dataCenter OBJC_DESIGNATED_INITIALIZER;
/// Initialize instance of MoEngageSDKConfig
/// \param appID Account identifier
/// :nodoc:
///
- (nonnull instancetype)initWithAppID:(NSString * _Nonnull)appID SWIFT_DEPRECATED_MSG("This method is deprecated in favour of constructor with data center parameter. This constructor would be removed in version 11.0.0 version of the SDK.");
/// Update the MoEngageSDKConfig properties if it belongs to test environment
/// :nodoc:
- (void)updateConfigForTestEnvironment;
/// Set the partner integration type
/// \param integrationType Enum of type <code>MoEngagePartnerIntegrationType</code>
/// :nodoc:
///
- (void)setPartnerIntegrationTypeWithIntegrationType:(enum MoEngagePartnerIntegrationType)integrationType;
/// Print the description of MoEngageSDKConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC12MoEngageCore23MoEngageSDKConfigEntity")
@interface MoEngageSDKConfigEntity : NSObject <NSCoding>
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MoEngageUserRegistrationStatus;
@class MoEngageUserInformation;

SWIFT_CLASS("_TtC12MoEngageCore15MoEngageSDKCore")
@interface MoEngageSDKCore : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageSDKCore * _Nonnull sharedInstance;)
+ (MoEngageSDKCore * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Register the user
/// \param data JWT token
///
/// \param completionHandler returns the status of registration data
///
- (void)registerUserWithData:(NSString * _Nonnull)data completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// Register the user for Secondary instance
/// \param data JWT token
///
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns the status of registration data
///
- (void)registerUserWithData:(NSString * _Nonnull)data appId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// UnRegister the User
/// note:
/// This API should be called only if user is registered successfully at some point using registerUser
/// \param data JWT token
///
/// \param completionHandler returns the status of Unregistration data
///
- (void)unregisterUserWithData:(NSString * _Nonnull)data completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// UnRegister the User for Secondary instance
/// note:
/// This API should be called only if user is registered successfully at some point using registerUser
/// \param data JWT token
///
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns the status of Unregistration data
///
- (void)unregisterUserWithData:(NSString * _Nonnull)data appId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageRegistrationData * _Nonnull))completionHandler;
/// Check if User has registered
/// \param completionHandler true if  user is registered else false
///
- (void)getUserRegistrationStatusWithCompletionHandler:(void (^ _Nonnull)(MoEngageUserRegistrationStatus * _Nonnull))completionHandler;
/// Check if User has registered for Secondary instance
/// \param appId MoEngage Account identifier
///
/// \param completionHandler true if  user is registered else false
///
- (void)getUserRegistrationStatusForAppId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageUserRegistrationStatus * _Nonnull))completionHandler;
/// Fetches unique ID generated by the MoEngage SDK.
/// \param completionHandler returns UUID generated by the MoEngage SDK
///
- (void)getMoEngageDeviceIdWithCompletionHandler:(void (^ _Nonnull)(MoEngageUserInformation * _Nonnull))completionHandler;
/// Fetches unique ID generated by the MoEngage SDK for Secondary instance
/// \param appId MoEngage Account identifier
///
/// \param completionHandler returns UUID generated by the MoEngage SDK
///
- (void)getMoEngageDeviceIdWithAppId:(NSString * _Nullable)appId completionHandler:(void (^ _Nonnull)(MoEngageUserInformation * _Nonnull))completionHandler;
/// API to enable the common logs  which are not specific to any AppId.
- (void)enableAllLogs;
/// API to disable the common logs  which are not specific to any AppId.
- (void)disableAllLogs;
@end


/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore19MoEngageSDKInstance")
@interface MoEngageSDKInstance : NSObject
@property (nonatomic, strong) MoEngageSDKConfig * _Nonnull sdkConfig;
@property (nonatomic, readonly, strong) dispatch_queue_t _Nonnull sdkQueue;
@property (nonatomic, readonly, strong) MoEngageLogger * _Nonnull logger;
- (void)updateRemoteConfig:(MoEngageRemoteConfiguration * _Nonnull)config;
- (MoEngageRemoteConfiguration * _Nonnull)getRemoteConfig SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Enum to set the SDK State
typedef SWIFT_ENUM(NSInteger, MoEngageSDKState, open) {
/// To enable the SDK
  MoEngageSDKStateEnabled = 0,
/// To disable the SDK
  MoEngageSDKStateDisabled = 1,
};


SWIFT_CLASS("_TtC12MoEngageCore22MoEngageSDKStateHelper")
@interface MoEngageSDKStateHelper : NSObject
/// Returns the current state of the SDK, i.e. whether it is enabled or disabled.
/// \param appID MoEngage Account Identifier
///
/// \param completion Returns true if SDK is enabled else false
///
+ (void)isSDKEnabledWithAppID:(NSString * _Nullable)appID completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks if the SDK is initialised with given account identifier
/// \param appID MoEngage Account Identifier
///
/// \param completion Returns true if SDK is initialized else false
///
+ (void)isSDKInitializedWithAppID:(NSString * _Nullable)appID completion:(void (^ _Nonnull)(BOOL))completion;
/// Checks if the SDK is initialised with default account
/// \param completion Returns true if SDK is initialized else false
///
+ (void)isSDKInitialized:(void (^ _Nonnull)(BOOL))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

/// :nodoc:
/// A configuration type to support SSL pinning validation.
SWIFT_CLASS("_TtC12MoEngageCore29MoEngageSSLVerificationConfig")
@interface MoEngageSSLVerificationConfig : NSObject
/// Keeps track if SSL Verification enabled, if true all Network Request
/// will be verified with certificate data provided.
@property (nonatomic, readonly) BOOL isEnabled;
/// Certificate data to use to perform validation
/// of server’s certificates.
@property (nonatomic, readonly, copy) NSData * _Nonnull certificateData;
/// Creates an instance of <code>MoEngageSSLVerificationConfig</code>
/// with provided configuration.
/// If pinning is enabled, the pinning configuration
/// and .certificate data is stored in UserDefaults.
/// \param isEnabled Whther SSL pinning will be enabled.
///
/// \param certificateData The certificate data that should match server’s certifacte.
///
- (nonnull instancetype)initWithIsEnabled:(BOOL)isEnabled certificateData:(NSData * _Nonnull)certificateData OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of <code>MoEngageSSLVerificationConfig</code>
/// with default configuration.
/// By default, pinning is disabled.
///
/// returns:
/// Instance of <code>MoEngageSSLVerificationConfig</code>.
+ (MoEngageSSLVerificationConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Store config data in UserDefaults
- (void)storeForSDKInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance;
/// Returns the instance of <code>MoEngageSSLVerificationConfig</code>
/// with configuration stored in UserDefaults.
/// If configuration and certificate data is not present in UserDefaults
/// pinning is disabled.
///
/// returns:
/// Instance of <code>MoEngageSSLVerificationConfig</code>.
+ (MoEngageSSLVerificationConfig * _Nonnull)storedConfigForSDKInstance:(MoEngageSDKInstance * _Nonnull)sdkInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class that implements userdefault functionality.
/// note:
/// This class is used for internal purpose.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore28MoEngageStandardUserDefaults")
@interface MoEngageStandardUserDefaults : NSObject <MoEngageUserDefaults>
- (void)setStringWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
- (NSString * _Nullable)getStringWithKey:(NSString * _Nonnull)key defaultValue:(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setIntegerWithKey:(NSString * _Nonnull)key value:(NSInteger)value;
- (NSInteger)getIntegerWithKey:(NSString * _Nonnull)key defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setBooleanWithKey:(NSString * _Nonnull)key value:(BOOL)value;
- (BOOL)getBooleanWithKey:(NSString * _Nonnull)key defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setDoubleWithKey:(NSString * _Nonnull)key value:(double)value;
- (double)getDoubleWithKey:(NSString * _Nonnull)key defaultValue:(double)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setFloatWithKey:(NSString * _Nonnull)key value:(float)value;
- (float)getFloatWithKey:(NSString * _Nonnull)key defaultValue:(float)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasKeyWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)removeKeyWithKey:(NSString * _Nonnull)key;
- (void)synchronise;
- (id _Nullable)objectWithKey:(NSString * _Nonnull)key defaultValue:(id _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (void)setWithValue:(id _Nonnull)value key:(NSString * _Nonnull)key;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MoEngageStorageEncryptionConfig;

/// Model class to support storage configuration
SWIFT_CLASS("_TtC12MoEngageCore21MoEngageStorageConfig")
@interface MoEngageStorageConfig : NSObject
/// Model responsible to enable storage encryption
@property (nonatomic, readonly, strong) MoEngageStorageEncryptionConfig * _Nonnull encryptionConfig;
/// Returns the instance of type <code>MoEngageStorageConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageStorageConfig</code>
/// :nodoc:
+ (MoEngageStorageConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize  the instance of MoEngageStorageConfig
/// \param encryptionConfig instance of type <code>MoEngageStorageEncryptionConfig</code>
///
- (nonnull instancetype)initWithEncryptionConfig:(MoEngageStorageEncryptionConfig * _Nonnull)encryptionConfig OBJC_DESIGNATED_INITIALIZER;
/// Print the description of <code>MoEngageStorageConfig</code>
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model class to support storage encryption
SWIFT_CLASS("_TtC12MoEngageCore31MoEngageStorageEncryptionConfig")
@interface MoEngageStorageEncryptionConfig : NSObject
/// Set the value as true to enable storage encryption
@property (nonatomic) BOOL isEncryptionEnabled;
/// Initialize the instance of type <code>MoEngageStorageEncryptionConfig</code>
/// \param isEncryptionEnabled Pass true to enable storage encryption
///
- (nonnull instancetype)initWithIsEncryptionEnabled:(BOOL)isEncryptionEnabled OBJC_DESIGNATED_INITIALIZER;
/// Returns the instance of MoEngageStorageEncryptionConfig with default configuration
///
/// returns:
/// Instance of MoEngageStorageEncryptionConfig  where encryption is disabled
+ (MoEngageStorageEncryptionConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Prints the description of MoEngageStorageEncryptionConfig
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class to provide MoEngageStandardUserDefaults instance
/// note:
/// This class is used for internal purpose.
/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageStorageProvider")
@interface MoEngageStorageProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) MoEngageStorageProvider * _Nonnull sharedInstance;)
+ (MoEngageStorageProvider * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// creates common UserDefaults
///
/// returns:
/// instance of type <code>MoEngageStandardUserDefaults</code>.
@property (nonatomic, strong) MoEngageStandardUserDefaults * _Nonnull commonUserDefault;
/// creates instance specific userdefault based on encryption status
/// \param sdkConfig <code>MoEngageSDKConfig</code> instance
///
///
/// returns:
/// UserDefault instance of type <code>MoEngageStandardUserDefaults</code>
- (id <MoEngageUserDefaults> _Nonnull)getUserDefaultWithSdkConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
- (id <MoEngageUserDefaults> _Nonnull)getUserDefaultForAppGroupIdWithSdkConfig:(MoEngageSDKConfig * _Nonnull)sdkConfig SWIFT_WARN_UNUSED_RESULT;
@end



/// Model that returns User related information
SWIFT_CLASS("_TtC12MoEngageCore23MoEngageUserInformation")
@interface MoEngageUserInformation : NSObject
/// User account related information
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// Unique id of the user.
@property (nonatomic, readonly, copy) NSString * _Nullable uniqueId;
- (nonnull instancetype)initWithAccountMeta:(MoEngageAccountMeta * _Nonnull)accountMeta uniqueId:(NSString * _Nullable)uniqueId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Registration Flow Configuration
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageUserRegistrationConfig")
@interface MoEngageUserRegistrationConfig : NSObject
/// Pass true to enable the user registration flow.
@property (nonatomic) BOOL isUserRegistrationEnabled;
/// Returns the instance of type <code>MoEngageUserRegistrationConfig</code> with default configuration
///
/// returns:
/// Instance of type <code>MoEngageUserRegistrationConfig</code>
/// :nodoc:
+ (MoEngageUserRegistrationConfig * _Nonnull)defaultConfig SWIFT_WARN_UNUSED_RESULT;
/// Initialize the instance of <code>MoEngageUserRegistrationConfig</code>
/// \param isUserRegistrationEnabled Pass true to enable the user registration flow else false.
///
- (nonnull instancetype)initWithIsUserRegistrationEnabled:(BOOL)isUserRegistrationEnabled OBJC_DESIGNATED_INITIALIZER;
/// Prints the description of MoEngageUserRegistrationConfig
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model responsible for User registration status
SWIFT_CLASS("_TtC12MoEngageCore30MoEngageUserRegistrationStatus")
@interface MoEngageUserRegistrationStatus : NSObject
/// User account related information
@property (nonatomic, readonly, strong) MoEngageAccountMeta * _Nonnull accountMeta;
/// true if user is registered else false.
@property (nonatomic) BOOL isUserRegistered;
- (nonnull instancetype)initWithAccountMeta:(MoEngageAccountMeta * _Nonnull)accountMeta isUserRegistered:(BOOL)isUserRegistered OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SFSafariViewController;

SWIFT_CLASS("_TtC12MoEngageCore22MoEngageWebViewHandler")
@interface MoEngageWebViewHandler : NSObject <SFSafariViewControllerDelegate>
- (void)safariViewControllerDidFinish:(SFSafariViewController * _Nonnull)controller;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end










/// :nodoc:
SWIFT_CLASS("_TtC12MoEngageCore17ValidateExtension")
@interface ValidateExtension : NSObject
+ (BOOL)isFromExtension SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
