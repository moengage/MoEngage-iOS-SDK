// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MoEngageCore
import CommonCrypto
import Foundation
import ImageIO
@_exported import MoEngageCore
import MoEngageSecurity
import OSLog
import SafariServices
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@_hasMissingDesignatedInitializers public class MoEngageTokenManagerFactory {
  public static let shared: MoEngageCore.MoEngageTokenManagerFactory
  public func logout(appId: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageDataTrackingUtils {
  public static func getPeriodicFlushDuration(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Int
  @objc deinit
}
public protocol MoEngageNetworkPreProcessor {
  func preProcess(task: any MoEngageCore.MoEngageNetworkTask, processed completion: @escaping (MoEngageCore.MoEngageNetworkPreProcessorResult) -> Swift.Void)
}
public enum MoEngageNetworkPreProcessorResult {
  case skipped
  case transformed(MoEngageCore.MoEngageNetworkRequest)
  case failed(any Swift.Error)
}
@_hasMissingDesignatedInitializers public class MoEngageNetworkRequest {
  public init?(sdkInstance: MoEngageCore.MoEngageSDKInstance, service: MoEngageCore.MoEngageNetworkService, additionalPathComponent: Swift.String? = nil, queryParams: [Swift.String : Swift.String] = [:], additionalHeaders: [Swift.String : Swift.String] = [:], body: Any = [:])
  public static func downloadRequest(forResource url: Foundation.URL, additionalHeaders: [Swift.String : Swift.String] = [:], sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageNetworkRequest
  public func updating(additionalHeaders: [Swift.String : Swift.String] = [:], bodyBuilder: ((_ current: Foundation.Data) throws -> Foundation.Data)? = nil) rethrows -> MoEngageCore.MoEngageNetworkRequest
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MoEngageAsyncOperation : Foundation.Operation {
  public enum State : Swift.String {
    case isReady
    case isExecuting
    case isFinished
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  open var state: MoEngageCore.MoEngageAsyncOperation.State {
    get
    set
  }
  @objc override dynamic open var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var isFinished: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func start()
  @objc override dynamic open func cancel()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MoEngageGeneralAsyncOperation : MoEngageCore.MoEngageAsyncOperation {
  public init(task: @escaping (@escaping () -> Swift.Void) -> Swift.Void)
  @objc override dynamic public func main()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageInboxManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageInboxManager
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func initializeInbox(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
public struct MoEngageCoreConstants {
  public static let moe: Swift.String
  public struct UserDefault {
    public static let suitName: Swift.String
    public struct Keys {
      public static let sdkVersion: Swift.String
      public static let prevSDKVersion: Swift.String
      public static let sdkUniqueID: Swift.String
      public static let sdkEnabled: Swift.String
      public static let trackReInstall: Swift.String
      public static let geoFenceEnabled: Swift.String
      public static let isJWTAuthEnabled: Swift.String
      public static let moengageRemoteConfig: Swift.String
    }
  }
  public struct DateTimeFormats {
    public static let iso8601: Swift.String
    public static let iso8601WithoutZ: Swift.String
    public static let iso8601MilliSec: Swift.String
    public static let short: Swift.String
    public static let timeWithoutZ: Swift.String
    public static let timeWithMilliSec: Swift.String
  }
  public struct Notifications {
    public struct Names {
      public static let userReset: Swift.String
      public static let updateModules: Swift.String
      public static let showInApp: Swift.String
    }
    public struct UserInfoKeys {
      public static let instanceID: Swift.String
    }
  }
  public struct DeviceType {
    public static let tablet: Swift.String
    public static let mobile: Swift.String
    public static let tv: Swift.String
  }
  public struct RequestPayloadKeys {
  }
  public static let debugIdentifier: Swift.String
  public static let encryptedFolder: Swift.String
  public struct Events {
    public static let appExit: Swift.String
    public static let logout: Swift.String
    public static let install: Swift.String
    public static let update: Swift.String
    public static let reinstall: Swift.String
    public static let appOpened: Swift.String
    public static let appClosed: Swift.String
    public static let userAttributeAction: Swift.String
    public static let cardDelivered: Swift.String
    public static let cardInboxClicked: Swift.String
    public static let cardImpression: Swift.String
    public static let cardClicked: Swift.String
    public static let cardDismissed: Swift.String
    public static let pushNotificationReceived: Swift.String
    public static let pushNotificationClicked: Swift.String
    public static let pushPreferenceChanged: Swift.String
  }
  public struct PayloadKeys {
    public static let requestTime: Swift.String
    public static let batchID: Swift.String
    public static let devicePreference: Swift.String
    public static let meta: Swift.String
    public static let queryParams: Swift.String
    public static let integrations: Swift.String
    public static let eventTrackingPref: Swift.String
    public static let requestID: Swift.String
  }
  public enum ConditionEvaluatorConstants {
    public static let appVersion: Swift.String
    public static let sdkVersion: Swift.String
    public static let platform: Swift.String
    public static let platformiOS: Swift.String
    public static let eventAttributes: Swift.String
  }
}
@objc public enum MoEngageInAppWhiteList : Swift.Int {
  case inAppShown
  case inAppClicked
  case inAppDismissed
  case inAppAutoDismissed
  case inAppRating
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MoEngageRegistrationResult : Swift.Int {
  case success
  case failure
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol MoEngageNetworkTask : AnyObject {
  var isCacellable: Swift.Bool { get }
  var type: MoEngageCore.MoEngageNetworkTaskType { get }
  var request: MoEngageCore.MoEngageNetworkRequest { get }
  func add(logger: any MoEngageCore.MoEngageNetworkLoggerProtocol)
  func add(delegates: [any MoEngageCore.MoEngageNetworkTaskDelegate])
  func add(preProcessors: [any MoEngageCore.MoEngageNetworkPreProcessor])
  func add(postProcessors: [any MoEngageCore.MoEngageNetworkPostProcessor])
  func resume()
  func cancel()
}
public enum MoEngageNetworkTaskType {
  case data
  case download
  public static func == (a: MoEngageCore.MoEngageNetworkTaskType, b: MoEngageCore.MoEngageNetworkTaskType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers final public class MoEngageDelayedOperation : Foundation.Operation {
  @objc override final public var isAsynchronous: Swift.Bool {
    @objc get
  }
  @objc override final public var isConcurrent: Swift.Bool {
    @objc get
  }
  @objc override final public var isExecuting: Swift.Bool {
    @objc get
  }
  @objc override final public var isFinished: Swift.Bool {
    @objc get
  }
  @objc override final public func start()
  @objc override final public func main()
  @objc override final public func cancel()
  @objc deinit
}
extension MoEngageCore.MoEngageDelayedOperation {
  @_hasMissingDesignatedInitializers @objcMembers @objc(MoEngageDelayedOperationContinuation) final public class Continuation : ObjectiveC.NSObject {
    @objc final public func fulfill()
    @objc deinit
  }
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func addStrictTimeout(tolerance: Foundation.TimeInterval = 1) -> any MoEngageCore.MoEngageNetworkTask
  @discardableResult
  public func addStrictTimeout(withInterval interval: Foundation.TimeInterval, tolerance: Foundation.TimeInterval = 1) -> any MoEngageCore.MoEngageNetworkTask
  @discardableResult
  public func addStrictTimeout(assumingTaskType type: MoEngageCore.MoEngageNetworkTaskType, tolerance: Foundation.TimeInterval = 1) -> any MoEngageCore.MoEngageNetworkTask
}
@objc @_hasMissingDesignatedInitializers public class MoEngageRemoteInAppConfig : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible {
  @objc final public let isStatsEnabled: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers open class MoEngageGeofenceHandler : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func initializeGeofence(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func onDataTrackingDisabled(_ sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MoEngageSDKCommonData : MoEngageCore.MoEngageDictionaryConvertible {
  final public var trackedSDKVersion: Swift.String?
  final public var prevSDKVersion: Swift.String?
  final public var trackedReInstall: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension MoEngageCore.MoEngageSDKCommonData {
  public static var sharedInstance: MoEngageCore.MoEngageSDKCommonData {
    get
  }
  public static func load()
  final public func save()
}
@objc public class MoEngageRegistrationData : ObjectiveC.NSObject {
  @objc final public let accountMeta: MoEngageCore.MoEngageAccountMeta
  @objc final public let type: MoEngageCore.MoEngageRegistrationType
  @objc final public let state: MoEngageCore.MoEngageRegistrationState
  @objc final public let result: MoEngageCore.MoEngageRegistrationResult
  public init(accountMeta: MoEngageCore.MoEngageAccountMeta, type: MoEngageCore.MoEngageRegistrationType, state: MoEngageCore.MoEngageRegistrationState, result: MoEngageCore.MoEngageRegistrationResult)
  @objc deinit
}
@objc public enum MoEngageRegistrationType : Swift.Int {
  case register
  case unregister
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MoEngageNetworkRequestConfig : ObjectiveC.NSObject {
  @objc final public let dataSecurityConfig: MoEngageCore.MoEngageNetworkDataSecurityConfig
  @objc final public let authorizationConfig: MoEngageCore.MoEngageNetworkAuthorizationConfig
  @objc final public let sslVerificationConfig: MoEngageCore.MoEngageSSLVerificationConfig
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageNetworkRequestConfig
  @objc public init(authorizationConfig: MoEngageCore.MoEngageNetworkAuthorizationConfig, dataSecurityConfig: MoEngageCore.MoEngageNetworkDataSecurityConfig, sslVerificationConfig: MoEngageCore.MoEngageSSLVerificationConfig)
  @objc convenience public init(authorizationConfig: MoEngageCore.MoEngageNetworkAuthorizationConfig)
  @objc convenience public init(dataSecurityConfig: MoEngageCore.MoEngageNetworkDataSecurityConfig)
  @objc convenience public init(sslVerificationConfig: MoEngageCore.MoEngageSSLVerificationConfig)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public class MoEngageGifManager {
  public static var defaultManager: MoEngageCore.MoEngageGifManager
  open var haveCache: Swift.Bool
  open var remoteCache: [Foundation.URL : Foundation.Data]
  public init(memoryLimit: Swift.Int)
  @objc deinit
  public func startTimerIfNeeded()
  public func stopTimer()
  open func addImageView(_ imageView: UIKit.UIImageView) -> Swift.Bool
  open func deleteImageView(_ imageView: UIKit.UIImageView)
  open func updateCacheSize(for imageView: UIKit.UIImageView, add: Swift.Bool)
  open func clear()
  open func containsImageView(_ imageView: UIKit.UIImageView) -> Swift.Bool
  open func hasCache(_ imageView: UIKit.UIImageView) -> Swift.Bool
  public func setImage(_ image: UIKit.UIImage, inView view: UIKit.UIImageView, loopCount: Swift.Int = -1)
  public func setGifImage(_ gifImage: UIKit.UIImage, inView view: UIKit.UIImageView, loopCount: Swift.Int = -1)
  public static func createGifImage(fromData gifData: Foundation.Data) throws -> UIKit.UIImage
  public static func clearGif(in imageView: UIKit.UIImageView)
  public static func startAnimatingGif(in imageView: UIKit.UIImageView)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKConfig : ObjectiveC.NSObject {
  @objc public var appId: Swift.String {
    get
  }
  @objc public var moeDataCenter: MoEngageCore.MoEngageDataCenter
  @objc public var appGroupID: Swift.String
  @objc public var analyticsPeriodicFlushDuration: Swift.Int
  @objc public var analyticsDisablePeriodicFlush: Swift.Bool
  @objc public var formattedAppId: Swift.String {
    get
  }
  @objc public var isDefaultInstance: Swift.Bool {
    get
  }
  @objc public var isTestEnvironment: Swift.Bool {
    get
  }
  public var partnerIntegrationType: MoEngageCore.MoEngagePartnerIntegrationType?
  @objc public var inAppConfig: MoEngageCore.MoEngageInAppConfig
  @objc public var storageConfig: MoEngageCore.MoEngageStorageConfig
  @objc public var keyChainConfig: MoEngageCore.MoEngageKeyChainConfig
  @objc public var userRegistrationConfig: MoEngageCore.MoEngageUserRegistrationConfig
  @objc public var networkConfig: MoEngageCore.MoEngageNetworkRequestConfig
  @objc public var consoleLogConfig: MoEngageCore.MoEngageConsoleLogConfig
  @objc public init(appId: Swift.String, dataCenter: MoEngageCore.MoEngageDataCenter)
  @available(*, deprecated, message: "This method is deprecated in favour of constructor with data center parameter. This constructor would be removed in version 11.0.0 version of the SDK.")
  @objc convenience public init(withAppID appID: Swift.String)
  @objc public func updateConfigForTestEnvironment()
  @objc public func setPartnerIntegrationType(integrationType: MoEngageCore.MoEngagePartnerIntegrationType)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum MoEngagePartnerIntegrationType : Swift.Int {
  case segment
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MoEngageEncryptionUtils {
  public static func shouldMigrateFromNoNEncryptionToEncryption(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.Bool
  public static func getCurrentEncryptionStateFromAppGroupId(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.Bool
  public static func getKeyChainFromAppGroupId(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.String
  public static func fetchStorageEncryptionKey(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.String
  public static func shouldResetStorageData(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.Bool
  public static func fetchCurrentNetworkEncryptionKey(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String?
  public static func getCurrentNetworkEncryptionStateFromAppGroupId(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.Bool
  @objc deinit
}
public enum MoEngageExceptions : Swift.Error {
  case mandatoryParamsMissing
  case mainThreadCheckFailed
  public static func == (a: MoEngageCore.MoEngageExceptions, b: MoEngageCore.MoEngageExceptions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class MoEngageCoreUtils : ObjectiveC.NSObject {
  @objc public static func getMaxParallelInstancesSupported() -> Swift.Int
  @objc public static func getSDKInstance(forInstanceID instanceID: Swift.String?) -> MoEngageCore.MoEngageSDKConfig?
  @objc public static func getSDKLibraryDirectoryPath() -> Swift.String?
  @objc public static func getInstanceRootDirectoryPath(forIdentifier identifier: Swift.String) -> Swift.String?
  @objc public static func getDocumentsDirectoryPath() -> Swift.String?
  @objc public static func removeFile(atPath path: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func removeDirectory(_ path: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func removeDirectory(folderPath: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func getAbsolutePath(folderPath: Swift.String, relativePath: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String?
  public static func removeFilePath(folderPath: Swift.String, relativePath: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func getAbsolutePathForSingleInstance(folderPath: Swift.String, relativePath: Swift.String) -> Swift.String?
  public static func getFolderPathForInstanceId(folderPath: Swift.String, identifier: Swift.String, shouldCreateFolder: Swift.Bool = true) -> Swift.String?
  @objc public static func getTopMostViewController() -> UIKit.UIViewController?
  @objc public static func showAlertView(withMessage msg: Swift.String, andTitle title: Swift.String)
  @available(iOSApplicationExtension, unavailable)
  @objc public static func openDeeplink(withUrlString urlStr: Swift.String?)
  @objc public static func openExternalBrowser(withUrlString urlStr: Swift.String?)
  @objc public static func getUrlFromString(_ urlStr: Swift.String?) -> Foundation.URL?
  @available(iOSApplicationExtension, unavailable)
  @objc public static func openDeeplink(withUrl url: Foundation.URL?)
  @objc public static func openRichLanding(withUrlString urlStr: Swift.String?)
  @objc public static func openRichLanding(withUrl url: Foundation.URL?)
  @objc public static func getMoEngageSDKVersion() -> Swift.String
  @objc public static func getAppVersion() -> Swift.String
  @objc public static func getMainTargetAppVersion() -> Swift.String
  @objc public static func getAppBundleId() -> Swift.String
  @objc public static func getIDFV() -> Swift.String?
  @objc public static func getDeviceModel() -> Swift.String
  @objc public static func getDeviceOSVersion() -> Swift.String
  @objc public static func getDeviceModelName() -> Swift.String
  @objc public static func getDeviceModelType() -> Swift.String
  @objc public static func savePushToken(token: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public static func getPushToken(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.String?
  @objc public static func getSDKUniqueIdForInstance(withConfig sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.String
  @objc public static func generateSDKUniqueID() -> Swift.String
  @objc public static func isSdkEnabledForInstance(withConfig sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.Bool
  @objc public static func fetchMoEngageSDKState(_ sdkConfig: MoEngageCore.MoEngageSDKConfig) -> MoEngageCore.MoEngageSDKState
  @objc public static func isAnalyticsEnabled(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func updateUserDefault(withSDKState isSDKEnabled: Swift.Bool, forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig)
  @objc public static func updateSDKState(_ isEnabled: Swift.Bool, withConfig sdkConfig: MoEngageCore.MoEngageSDKConfig)
  @objc public static func isDataTrackingEnabled(forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.Bool
  @objc public static func setDataTrackingOptOutStatus(forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig, optOutStatus: Swift.Bool)
  @objc public static func sharedUIApplication() -> UIKit.UIApplication?
  @objc public static var isAppInBackground: Swift.Bool
  @objc public static func setIDFAOptOutStatus(forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig, optOutStatus: Swift.Bool)
  @objc public static func setIDFVOptOutStatus(forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig, optOutStatus: Swift.Bool)
  @objc public static func isIDFATrackingEnabled(forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.Bool
  @objc public static func isIDFVTrackingEnabled(forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig) -> Swift.Bool
  public static func initializeAllModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func isValidNumber<T>(number: T) -> Swift.Bool where T : Swift.ExpressibleByFloatLiteral, T : Swift.FloatingPoint
  @objc public static func getAccountMeta(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageAccountMeta
  @objc public static func getStringRepresentation(event: MoEngageCore.MoEngageInAppWhiteList) -> Swift.String
  @objc public static func isUserRegistered(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public static func updateUserRegisterState(state: MoEngageCore.MoEngageRegistrationState, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func getIDFA() -> Swift.String?
  @objc public static func generateHashValue(from input: Swift.String) -> Swift.String
  public static func mapJSONToString(data: [Swift.String : Any]) -> Swift.String?
  public static func mapAnyObjectToDict(data: Any?) -> [Swift.String : Any]?
  public static func mapStringToJSON(str: Swift.String) -> [Swift.String : Any]?
  public static func mapBase64ToJSON(str: Swift.String) -> [Swift.String : Any]?
  public static func getIntegrationInfoFromAppGroupId(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> [[Swift.String : Any]]?
  public static func getStringFromHTML(_ htmlString: Swift.String) -> Swift.String?
  public static func getDoubleValue(from string: Swift.String) -> Swift.Double?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ValidateExtension : ObjectiveC.NSObject {
  @objc public static func isFromExtension() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public protocol MoEngageNetworkSessionDelegate {
  func didReceive(challenge: Foundation.URLAuthenticationChallenge, session: any MoEngageCore.MoEngageNetworkSessionProtocol, completionHandler: @escaping (MoEngageCore.MoEngageNetworkSessionAuthChallengeDisposition) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageCardsManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageCardsManager
  public func logout(onUserReset: Swift.Bool = true, sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func initializeCards(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationWillBecomeInActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func removeCardsDataFromStorage(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public class MoEngageStorageEncryptionConfig : ObjectiveC.NSObject {
  @objc public var isEncryptionEnabled: Swift.Bool
  @objc public init(isEncryptionEnabled: Swift.Bool)
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageStorageEncryptionConfig
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public enum MoEngageGzip {
  public static let maxWindowBits: Swift.Int32
}
public struct MoEngageCompressionLevel : Swift.RawRepresentable {
  public let rawValue: Swift.Int32
  public static let noCompression: MoEngageCore.MoEngageCompressionLevel
  public static let bestSpeed: MoEngageCore.MoEngageCompressionLevel
  public static let bestCompression: MoEngageCore.MoEngageCompressionLevel
  public static let defaultCompression: MoEngageCore.MoEngageCompressionLevel
  public init(rawValue: Swift.Int32)
  public init(_ rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
}
public struct MoEngageGzipError : Swift.Error {
  public enum Kind : Swift.Equatable {
    case stream
    case data
    case memory
    case buffer
    case version
    case unknown(code: Swift.Int)
    public static func == (a: MoEngageCore.MoEngageGzipError.Kind, b: MoEngageCore.MoEngageGzipError.Kind) -> Swift.Bool
  }
  public let kind: MoEngageCore.MoEngageGzipError.Kind
  public let message: Swift.String
  public var localizedDescription: Swift.String {
    get
  }
}
public struct MoEngageFileData {
  public var data: [Swift.String : Any]
  public init(data: [Swift.String : Any] = [:])
}
@objc public enum MoEngageLoggerType : Swift.Int, MoEngageCore.MoEngageDictionaryConvertible {
  case verbose = 0
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class MoEngageSSLVerificationConfig : ObjectiveC.NSObject {
  @objc final public let isEnabled: Swift.Bool
  @objc final public let certificateData: Foundation.Data
  @objc public init(isEnabled: Swift.Bool = true, certificateData: Foundation.Data)
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageSSLVerificationConfig
  @objc public static func storedConfig(forSDKInstance sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageSSLVerificationConfig
  @objc deinit
}
public typealias UserRegistrationHandler = (MoEngageCore.MoEngageRegistrationData) -> Swift.Void
public typealias UserRegistrationStatusHandler = (MoEngageCore.MoEngageUserRegistrationStatus) -> Swift.Void
public typealias UserInfoHandler = (MoEngageCore.MoEngageUserInformation) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageSDKCore : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageSDKCore
  @objc public func registerUser(data: Swift.String, completionHandler: @escaping MoEngageCore.UserRegistrationHandler)
  @objc public func registerUser(data: Swift.String, appId: Swift.String? = nil, completionHandler: @escaping MoEngageCore.UserRegistrationHandler)
  @objc public func unregisterUser(data: Swift.String, completionHandler: @escaping MoEngageCore.UserRegistrationHandler)
  @objc public func unregisterUser(data: Swift.String, appId: Swift.String? = nil, completionHandler: @escaping MoEngageCore.UserRegistrationHandler)
  @objc public func getUserRegistrationStatus(completionHandler: @escaping MoEngageCore.UserRegistrationStatusHandler)
  @objc public func getUserRegistrationStatus(forAppId appId: Swift.String? = nil, completionHandler: @escaping MoEngageCore.UserRegistrationStatusHandler)
  @objc public func getMoEngageDeviceId(completionHandler: @escaping MoEngageCore.UserInfoHandler)
  @objc public func getMoEngageDeviceId(appId: Swift.String? = nil, completionHandler: @escaping MoEngageCore.UserInfoHandler)
  @objc public func enableAllLogs()
  @objc public func disableAllLogs()
  @objc deinit
}
@objc public class MoEngageIntegrationInfo : ObjectiveC.NSObject {
  @objc final public let integrationType: Swift.String
  @objc final public let integrationVersion: Swift.String
  @objc public init(pluginType: Swift.String, version: Swift.String)
  @objc deinit
}
public struct MoEngagePlatformInfo {
  public let platformType: Swift.String
  public let osType: Swift.String?
  public func asRequestPayload() -> [Swift.String : Swift.String]
  public static func current() -> MoEngageCore.MoEngagePlatformInfo
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MoEngageConfigDelegateHandler : MoEngageCore.MoEngageConfigDelegate {
  override public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  override public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateDataFromPreviousVersion(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  override public func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public class MoEngageKeyChainConfig : ObjectiveC.NSObject {
  @objc final public let groupName: Swift.String
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageKeyChainConfig
  @objc public init(groupName: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageDateUtils : ObjectiveC.NSObject {
  @objc public static func dateFormatter(forFormat format: Swift.String?, andforGMT isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func dateFormatterForUsPosixLocale(withFormat format: Swift.String, forGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func dateFormatterForDeviceLocale(withFormat format: Swift.String, forGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.DateFormatter?
  @objc public static func isDate1(_ date1: Foundation.Date, sameAsDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDate1(_ date1: Foundation.Date, laterToDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDate1(_ date1: Foundation.Date, earlierToDate2 date2: Foundation.Date) -> Swift.Bool
  @objc public static func isDateLaterToCurrentTime(_ date: Foundation.Date) -> Swift.Bool
  @objc public static func checkDateInRange(_ dateToEvaluate: Foundation.Date?, fromStartDate startDate: Foundation.Date?, toEndDate endDate: Foundation.Date?) -> Swift.Bool
  @objc public static func checkTimeInRange(_ timeToEvaluate: Foundation.DateComponents, fromStartTime startTime: Foundation.DateComponents, toEndTime endTime: Foundation.DateComponents) -> Swift.Bool
  @objc public static func getGMTtimeEpoch(forDate date: Foundation.Date? = nil) -> Swift.String
  @objc public static func getLocalTimeForEventsPayload(forDate date: Foundation.Date? = nil) -> Swift.String?
  @objc public static func dateByAddingDays(_ days: Swift.UInt, toDate date: Foundation.Date) -> Foundation.Date?
  @objc public static func dateBySubtractingDays(_ days: Swift.UInt, toDate date: Foundation.Date) -> Foundation.Date?
  @objc public static func getDateComponentsFromTimeString(_ timeString: Swift.String?) -> Foundation.DateComponents?
  @objc public static func getString(forDate date: Foundation.Date?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Swift.String?
  @objc public static func getStringInDeviceLocale(forDate date: Foundation.Date?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Swift.String?
  @objc public static func getDate(forString str: Swift.String?, withFormat format: Swift.String?, andForGMTTimeZone isGMTtz: Swift.Bool) -> Foundation.Date?
  public static func getDateFromISOString(_ dateString: Swift.String?) -> Foundation.Date?
  public static func getEpochDate(date: Foundation.Date) -> Swift.Double
  public static func getDateFromEpoch(epoch: Swift.Double) -> Foundation.Date
  public static func getCurrentEpochTimeInMilliSeconds() -> Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageInstanceProvider {
  public static func getSDKInstance(appId: Swift.String? = nil, completionBlock: @escaping (MoEngageCore.MoEngageSDKInstance?) -> Swift.Void)
  public static func getSDKConfig(appId: Swift.String? = nil) -> MoEngageCore.MoEngageSDKConfig?
  @objc deinit
}
public protocol MoEngageNetworkLoggerProtocol {
  func log(task: any MoEngageCore.MoEngageNetworkTask)
  func log(result: MoEngageCore.MoEngageNetworkRequestResult)
  func log(downloadResult: MoEngageCore.MoEngageNetworkDownloadRequestResult)
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func addDefaultLogger() -> Self
}
public func integrationInfoToDictionary(_ integrationInfo: [MoEngageCore.MoEngageIntegrationInfo]) -> [[Swift.String : Swift.String]]?
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func addGZipCompressionProcessing() -> Self
}
public struct MoEngageNetworkConstants {
  public struct APIRequestBodyKeys {
    public static let osType: Swift.String
  }
}
@objc public class MoEngageUserInformation : ObjectiveC.NSObject {
  @objc final public let accountMeta: MoEngageCore.MoEngageAccountMeta
  @objc final public let uniqueId: Swift.String?
  @objc public init(accountMeta: MoEngageCore.MoEngageAccountMeta, uniqueId: Swift.String? = nil)
  @objc deinit
}
@objc public enum MoEngageRegistrationState : Swift.Int {
  case registered
  case unregistered
  case flowNotEnabled
  case userNotRegistered
  case invalidData
  case sdkOrAccountDisabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class MoEngageRemoteSecurityConfig : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible {
  final public let encryptionKey: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension MoEngageCore.MoEngageCoreUtils {
  public static func convertToArrayDict<T>(input: [T]) -> [[Swift.String : Any]]? where T : MoEngageCore.MoEngageDictionaryConvertible
  public static func getObjectArray<T>(input: [[Swift.String : Any]]?) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public static func getObject<T>(input: [Swift.String : Any]?) -> T? where T : Swift.Decodable, T : Swift.Encodable
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageInAppManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageInAppManager
  public func trackEvent(eventName: Swift.String, eventAttribute: [Swift.String : Any], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func initializeInApp(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func applicationEnteredForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func applicationWillResignActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func keyboardWillShow(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func keyboardDidHide(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func statusBarOrientationChanged(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func showInApp(notification: Foundation.Notification)
  public func migrateDataFromNoNEncryptionToEncryption(for sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  public func migrateDataFromPreviousVersions(for sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func syncInAppStatsData(for sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func removeInAppStorageData(for sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  @objc deinit
}
@objc public class MoEngageNetworkDataSecurityConfig : ObjectiveC.NSObject {
  @objc final public let isEncryptionEnabled: Swift.Bool
  @objc public var encryptionKeyDebug: Swift.String
  @objc public var encryptionKeyRelease: Swift.String
  @objc public init(isEncryptionEnabled: Swift.Bool, encryptionKeyDebug: Swift.String, encryptionKeyRelease: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageNetworkDataSecurityConfig
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageAnalyticsManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageAnalyticsManager
  @objc open func initializeAnalytics(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidBecomeActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationWillResignActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterBackground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func flush(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func resetDataAfterUnRegistration(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func syncExistingDataBeforeUnRegisteration(sdkInstance: MoEngageCore.MoEngageSDKInstance, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MoEngageRemoteDataTrackingConfig : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible {
  final public let isPeriodicSyncEnabled: Swift.Bool
  final public let periodicSyncInterval: Swift.Int
  final public let blackListedEvents: Swift.Set<Swift.String>
  final public let blackListedUserAttributes: Swift.Set<Swift.String>
  final public let gdprWhitelistedEvents: Swift.Set<Swift.String>
  final public let blackListedUniqueIds: Swift.Set<Swift.String>
  final public let eventBatchCount: Swift.Int
  final public let userAttributeCacheDuration: Swift.Int
  public var flushEvents: Swift.Set<Swift.String>
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class MoEngageEncryptedStandardUserDefaults : ObjectiveC.NSObject, MoEngageCore.MoEngageUserDefaults {
  public init(userDefaultName: Swift.String, encryptionKey: Swift.String)
  @objc public func setString(key: Swift.String, value: Swift.String)
  @objc public func getString(key: Swift.String, defaultValue: Swift.String? = nil) -> Swift.String?
  @objc public func setInteger(key: Swift.String, value: Swift.Int)
  @objc public func getInteger(key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc public func setBoolean(key: Swift.String, value: Swift.Bool)
  @objc public func getBoolean(key: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  @objc public func setDouble(key: Swift.String, value: Swift.Double)
  @objc public func getDouble(key: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  @objc public func setFloat(key: Swift.String, value: Swift.Float)
  @objc public func getFloat(key: Swift.String, defaultValue: Swift.Float) -> Swift.Float
  @objc public func hasKey(key: Swift.String) -> Swift.Bool
  @objc public func removeKey(key: Swift.String)
  @objc public func synchronise()
  @objc public func object(key: Swift.String, defaultValue: Any?) -> Any?
  @objc public func set(value: Any, key: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageConfigManager {
  public static let sharedInstance: MoEngageCore.MoEngageConfigManager
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func migrateDataFromPreviousVersion(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  public func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageColorUtils {
  public static func hexToRGB(hex: Swift.String, alpha: Swift.Float = 1.0) -> UIKit.UIColor
  @objc deinit
}
public struct MoEngageFileDataHandler {
  public init(folderPath: Swift.String, filePath: Swift.String, sdkInstance: MoEngageCore.MoEngageSDKInstance, shouldFetchExtensionSharedPath: Swift.Bool = false, isInstanceSpecific: Swift.Bool = false)
  public func fetchData() -> MoEngageCore.MoEngageFileData
  public func saveData(response: [Swift.String : Any])
}
@_inheritsConvenienceInitializers @objc public class MoEngageNetworkConfiguration : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public protocol MoEngageStringConvertibleModel {
  var description: Swift.String { get }
}
extension MoEngageCore.MoEngageStringConvertibleModel {
  public var description: Swift.String {
    get
  }
}
public protocol MoEngageDictionaryConvertible : Swift.Decodable, Swift.Encodable {
  func convertToDict() -> [Swift.String : Any]?
}
extension MoEngageCore.MoEngageDictionaryConvertible {
  public func convertToDict() -> [Swift.String : Any]?
}
@objc @objcMembers final public class MoEngageDelayedOperationManager : ObjectiveC.NSObject {
  @objc public init(named name: Swift.String, forInstance sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc final public func schedule(id: Swift.String, withDelay delay: Swift.Double, performingAction action: @escaping (MoEngageCore.MoEngageDelayedOperation.Continuation) -> Swift.Void, cancellation: @escaping () -> Swift.Void)
  @objc final public func isAlreadyScheduled(forId id: Swift.String) -> Swift.Bool
  @objc final public func cancelAll()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MoEngageRealTimeTriggerDelegate : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func trackEvent(eventName: Swift.String, eventAttribute: [Swift.String : Any], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func initializeRTT(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationWillBecomeInActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MoEngageRemoteConfiguration : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible {
  @objc final public let isAppEnabled: Swift.Bool
  @objc final public let moduleStatus: MoEngageCore.MoEngageRemoteModuleStatus
  final public let dataTrackingConfig: MoEngageCore.MoEngageRemoteDataTrackingConfig
  final public let analyticsConfig: MoEngageCore.MoEngageRemoteAnalyticsConfig
  final public let rttConfig: MoEngageCore.MoEngageRemoteRealTimeTriggerConfig
  @objc final public let inAppConfig: MoEngageCore.MoEngageRemoteInAppConfig
  final public let securityConfig: MoEngageCore.MoEngageRemoteSecurityConfig
  final public let logConfig: MoEngageCore.MoEngageRemoteLogConfig
  final public let remoteNetworkConfig: MoEngageCore.MoEngageRemoteNetworkConfig
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class MoEngageAccountMeta : ObjectiveC.NSObject {
  @objc final public let appID: Swift.String
  @objc public init(withInstanceID instanceID: Swift.String)
  @objc deinit
}
public struct MoEngageRemoteNetworkConfig : MoEngageCore.MoEngageStringConvertibleModel, MoEngageCore.MoEngageDictionaryConvertible {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol MoEngageUserDefaults {
  @objc func setString(key: Swift.String, value: Swift.String)
  @objc func getString(key: Swift.String, defaultValue: Swift.String?) -> Swift.String?
  @objc func setInteger(key: Swift.String, value: Swift.Int)
  @objc func getInteger(key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc func setBoolean(key: Swift.String, value: Swift.Bool)
  @objc func getBoolean(key: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  @objc func setDouble(key: Swift.String, value: Swift.Double)
  @objc func getDouble(key: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  @objc func setFloat(key: Swift.String, value: Swift.Float)
  @objc func getFloat(key: Swift.String, defaultValue: Swift.Float) -> Swift.Float
  @objc func hasKey(key: Swift.String) -> Swift.Bool
  @objc func removeKey(key: Swift.String)
  @objc func object(key: Swift.String, defaultValue: Any?) -> Any?
  @objc func set(value: Any, key: Swift.String)
  @objc func synchronise()
}
@_inheritsConvenienceInitializers @objc public class MoEngageNetworkUtils : ObjectiveC.NSObject {
  @objc public static func getQueryParams(sdkInstance: MoEngageCore.MoEngageSDKInstance, isV1ParamsRequired: Swift.Bool = false) -> [Swift.String : Any]
  public static func getTimeParams(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> [Swift.String : Any]
  public static func getAppVersionParamForExtensions() -> [Swift.String : Swift.String]
  @objc public static func getDeviceUniqueID() -> Swift.String?
  @objc public static func isDeviceUniqueIDPresentInKeyChain() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public struct MoEngageFolderDataHandler {
  public init(sdkInstance: MoEngageCore.MoEngageSDKInstance, folderName: Swift.String, isFromExtension: Swift.Bool = false)
  public func getData(file: Swift.String) throws -> Foundation.Data
  public func saveData(response: [Swift.String : Any], fileName: Swift.String)
  public func doesPathExist(for file: Swift.String) -> Swift.Bool
  public func getFolderPath() -> Swift.String?
  public func getFilePath(for file: Swift.String) -> Swift.String?
}
@objc public class MoEngageStandardUserDefaults : ObjectiveC.NSObject, MoEngageCore.MoEngageUserDefaults {
  public init(userDefaultName: Swift.String)
  @objc public func setString(key: Swift.String, value: Swift.String)
  @objc public func getString(key: Swift.String, defaultValue: Swift.String? = nil) -> Swift.String?
  @objc public func setInteger(key: Swift.String, value: Swift.Int)
  @objc public func getInteger(key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  @objc public func setBoolean(key: Swift.String, value: Swift.Bool)
  @objc public func getBoolean(key: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  @objc public func setDouble(key: Swift.String, value: Swift.Double)
  @objc public func getDouble(key: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  @objc public func setFloat(key: Swift.String, value: Swift.Float)
  @objc public func getFloat(key: Swift.String, defaultValue: Swift.Float) -> Swift.Float
  @objc public func hasKey(key: Swift.String) -> Swift.Bool
  @objc public func removeKey(key: Swift.String)
  @objc public func synchronise()
  @objc public func object(key: Swift.String, defaultValue: Any?) -> Any?
  @objc public func set(value: Any, key: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageGeofenceManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageGeofenceManager
  @objc open func initializeGeofence(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func onDataTrackingDisabled(_ sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageStorageProvider : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageStorageProvider
  @objc public var commonUserDefault: MoEngageCore.MoEngageStandardUserDefaults {
    @objc get
    @objc set
  }
  @objc public func getUserDefault(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> any MoEngageCore.MoEngageUserDefaults
  @objc public func getUserDefaultForAppGroupId(sdkConfig: MoEngageCore.MoEngageSDKConfig) -> any MoEngageCore.MoEngageUserDefaults
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageSDKStateHelper : ObjectiveC.NSObject {
  @objc public static func isSDKEnabled(appID: Swift.String? = nil, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public static func isSDKInitialized(appID: Swift.String? = nil, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public static func isSDKInitialized(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public class JSONNull : Swift.Codable, Swift.Hashable {
  public static func == (lhs: MoEngageCore.JSONNull, rhs: MoEngageCore.JSONNull) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
}
public class JSONCodingKey : Swift.CodingKey {
  required public init?(intValue: Swift.Int)
  required public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  @objc deinit
}
public class JSONAny : Swift.Codable {
  final public let value: Any
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageQueueManager {
  final public let operationQueue: Foundation.OperationQueue
  @objc deinit
}
public protocol MoEngageNetworkPostProcessor {
  func postProcess(result: MoEngageCore.MoEngageNetworkRequestResult, task: any MoEngageCore.MoEngageNetworkTask, processed completion: @escaping (MoEngageCore.MoEngageNetworkPostProcessorResult) -> Swift.Void)
  func postProcess(downloadResult: MoEngageCore.MoEngageNetworkDownloadRequestResult, task: any MoEngageCore.MoEngageNetworkTask, processed completion: @escaping (MoEngageCore.MoEngageNetworkDownloadPostProcessorResult) -> Swift.Void)
}
public enum MoEngageNetworkPostProcessorResult {
  case skipped
  case transformed(MoEngageCore.MoEngageNetworkRequestResult)
  case failed(any Swift.Error)
}
public enum MoEngageNetworkDownloadPostProcessorResult {
  case skipped
  case transformed(MoEngageCore.MoEngageNetworkDownloadRequestResult)
  case failed(any Swift.Error)
}
@objc public class MoEngageNetworkAuthorizationConfig : ObjectiveC.NSObject {
  @objc final public let isJwtEnbaled: Swift.Bool
  @objc public init(isJwtEnbaled: Swift.Bool)
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageNetworkAuthorizationConfig
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MoEngageMessagingHandler : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func initializeMessaging(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MoEngageRemoteLogConfig : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible {
  final public let isLoggingEnabled: Swift.Bool
  final public let loglevel: MoEngageCore.MoEngageLoggerType
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public class MoEngageEventConditionEvaluator : ObjectiveC.NSObject {
  @objc public init(withEventName name: Swift.String, andConditionDict conditionDict: [Swift.String : Any])
  @objc public func checkConditionSatisfied(forEvent event: Swift.String, andAttributesPayload attributesPayload: [Swift.String : Any]) -> Swift.Bool
  @objc deinit
}
@objc public class MoEngageUserRegistrationConfig : ObjectiveC.NSObject {
  @objc public var isUserRegistrationEnabled: Swift.Bool
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageUserRegistrationConfig
  @objc public init(isUserRegistrationEnabled: Swift.Bool)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum MoEngageDataCenter : Swift.Int {
  case data_center_default
  case data_center_01
  case data_center_02
  case data_center_03
  case data_center_04
  case data_center_05
  case data_center_100
  public static func getDataCenter(dataCenter: Swift.String) -> MoEngageCore.MoEngageDataCenter
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class MoEngageSDKInstance : ObjectiveC.NSObject {
  @objc public var sdkConfig: MoEngageCore.MoEngageSDKConfig {
    get
  }
  @objc final public let sdkQueue: Dispatch.DispatchQueue
  @objc final public let logger: MoEngageCore.MoEngageLogger
  final public let queueManager: MoEngageCore.MoEngageQueueManager
  public var session: any MoEngageCore.MoEngageNetworkSessionProtocol {
    get
  }
  @objc public func updateRemoteConfig(_ config: MoEngageCore.MoEngageRemoteConfiguration)
  @objc public func getRemoteConfig() -> MoEngageCore.MoEngageRemoteConfiguration
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageCoreCache : ObjectiveC.NSObject {
  public var integrationInfo: [MoEngageCore.MoEngageIntegrationInfo] {
    get
  }
  @objc public var isSegmentInitialized: Swift.Bool
  public func addIntegrationInfo(_ info: MoEngageCore.MoEngageIntegrationInfo)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageRealTimeTriggerManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageRealTimeTriggerManager
  public func trackEvent(eventName: Swift.String, eventAttribute: [Swift.String : Any], sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  public func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func initializeRTT(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationWillBecomeInActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageConfigCoordinator : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageConfigCoordinator
  public var sdkInstanceCache: [Swift.String : MoEngageCore.MoEngageSDKInstance] {
    get
  }
  @objc deinit
  @objc public func getSdkInstance(forSDKConfig sdkConfig: MoEngageCore.MoEngageSDKConfig, withCompletionHandler completionHandler: @escaping ((MoEngageCore.MoEngageSDKInstance?) -> Swift.Void))
  @objc public func getSdkInstance(_ instanceId: Swift.String?, completionHandler: @escaping ((MoEngageCore.MoEngageSDKInstance?) -> Swift.Void))
  @objc public func getDefaultSdkInstance(_ completionHandler: @escaping ((MoEngageCore.MoEngageSDKInstance?) -> Swift.Void))
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageCoreIntegrator : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageCoreIntegrator
  @objc public func addIntergrationInfo(info: MoEngageCore.MoEngageIntegrationInfo, appId: Swift.String? = nil)
  @objc public func getCoreCache(_ sdkInstance: MoEngageCore.MoEngageSDKInstance, completionHandler: @escaping ((MoEngageCore.MoEngageCoreCache) -> Swift.Void))
  @objc public func enableSDKForSegment(instanceID: Swift.String)
  @objc deinit
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func attachJWTProcessing(enabled: Swift.Bool = !MoEngageCoreUtils.isAppInBackground) -> any MoEngageCore.MoEngageNetworkTask
}
@objc public class MoEngageStorageConfig : ObjectiveC.NSObject {
  @objc final public let encryptionConfig: MoEngageCore.MoEngageStorageEncryptionConfig
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageStorageConfig
  @objc public init(encryptionConfig: MoEngageCore.MoEngageStorageEncryptionConfig)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class MoEngageUserRegistrationStatus : ObjectiveC.NSObject {
  @objc final public let accountMeta: MoEngageCore.MoEngageAccountMeta
  @objc public var isUserRegistered: Swift.Bool
  @objc public init(accountMeta: MoEngageCore.MoEngageAccountMeta, isUserRegistered: Swift.Bool)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MoEngageRemoteModuleStatus : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible {
  @objc final public let isInAppEnabled: Swift.Bool
  final public let isInboxEnabled: Swift.Bool
  final public let isGeofenceEnabled: Swift.Bool
  final public let isRttEnabled: Swift.Bool
  final public let isCardEnabled: Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageMessagingManager : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageMessagingManager
  @objc open func initializeMessaging(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  @objc open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
@objc public class MoEngageLogger : ObjectiveC.NSObject {
  @objc public init(sdkInstanceTag: Swift.String)
  @objc public func log(logLevel: MoEngageCore.MoEngageLoggerType = .verbose, message: Swift.String, stackTrace: [Swift.String]? = nil, label: Swift.String? = nil, shouldLogContext: Swift.Bool = true, file: Swift.String = #file, method: Swift.String = #function)
  @objc public static func logDefault(logLevel: MoEngageCore.MoEngageLoggerType = .verbose, message: Swift.String, stackTrace: [Swift.String]? = nil, label: Swift.String? = nil, shouldLogContext: Swift.Bool = true, file: Swift.String = #file, method: Swift.String = #function)
  @objc deinit
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func addNetworkEncryptionHandling() -> Self
}
@objc @_inheritsConvenienceInitializers open class MoEngageConfigDelegate : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersion(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
extension MoEngageCore.MoEngageNetworkTask {
  @discardableResult
  public func saveReportsRequestInfoWithComponents() -> any MoEngageCore.MoEngageNetworkTask
}
@objc @_inheritsConvenienceInitializers open class MoEngageAnalyticsDelegate : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func initializeAnalytics(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func flush(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidBecomeActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationWillResignActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterBackground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func resetDataAfterUnRegistration(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func syncExistingDataBeforeUnRegisteration(sdkInstance: MoEngageCore.MoEngageSDKInstance, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class MoEngageInboxDelegate : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func logout(sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func initializeInbox(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
public struct MoEngageDefaultStates {
  public static let defaultDataTrackingState: Swift.Bool
  public static let defaultSdKState: Swift.Bool
  public static let defaultReinstallState: Swift.Bool
  public static let whitelistedEvents: [Swift.String]
  public static let instantFlushEvents: [Swift.String]
}
public struct MoEngageCoreDataManager {
  public init()
  public func fetchRemoteConfiguration(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageRemoteConfiguration?
  public func fetchCoreData(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> MoEngageCore.MoEngageSDKCoreData?
  public func saveCoreData(_ data: MoEngageCore.MoEngageSDKCoreData, sdkInstance: MoEngageCore.MoEngageSDKInstance)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class MoEngageCoreHandler : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageCore.MoEngageCoreHandler
  @objc public static let globalQueue: Dispatch.DispatchQueue
  public func setupSDK(_ sdkConfig: MoEngageCore.MoEngageSDKConfig, isDefault: Swift.Bool = true, completionHandler: @escaping (MoEngageCore.MoEngageSDKInstance?) -> Swift.Void)
  @objc public func initializeModule(sdkInstance: MoEngageCore.MoEngageSDKInstance, sdkState: MoEngageCore.MoEngageSDKState)
  @objc public func initializeInstanceWithSDKConfig(_ sdkConfig: MoEngageCore.MoEngageSDKConfig, isDefaultInstance: Swift.Bool, withCompletionBlock completion: @escaping ((MoEngageCore.MoEngageSDKInstance?) -> Swift.Void))
  @objc public func getDefaultSDKConfiguration() -> MoEngageCore.MoEngageSDKConfig?
  @objc public func getSDKConfig(forAppID appID: Swift.String) -> MoEngageCore.MoEngageSDKConfig?
  @objc public func getAllSDKConfigs() -> [MoEngageCore.MoEngageSDKConfig]
  @objc public func isSDKEnabled() -> Swift.Bool
  @objc public func updateSDKState(sdkInstance: MoEngageCore.MoEngageSDKInstance, sdkState: Swift.Bool)
  @objc public func enableSDK(appId: Swift.String? = nil)
  @objc public func disableSDK(appId: Swift.String? = nil)
  @objc public func isSDKEnabledForInstance(sdkInstance: MoEngageCore.MoEngageSDKInstance) -> Swift.Bool
  @objc public func isDeviceUniqueIDPresentInKeyChain() -> Swift.Bool
  @objc public func dismissRichLandingWebViewControllerWithAnimation(_ animate: Swift.Bool)
  @objc deinit
}
@objc public class MoEngageConsoleLogConfig : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible, MoEngageCore.MoEngageStringConvertibleModel {
  @objc final public let isLoggingEnabled: Swift.Bool
  @objc final public let loglevel: MoEngageCore.MoEngageLoggerType
  @objc public init(isLoggingEnabled: Swift.Bool, loglevel: MoEngageCore.MoEngageLoggerType)
  @objc public static func defaultConfig() -> MoEngageCore.MoEngageConsoleLogConfig
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class MoEngageSDKCoreData : MoEngageCore.MoEngageDictionaryConvertible {
  final public var appVersionAppStatus: Swift.String?
  final public var hasDeviceAddFailed: Swift.Bool
  final public var geofenceEnabled: Swift.Bool
  final public var installRegistered: Swift.Bool
  final public var deviceTypeTracked: Swift.Bool
  final public var trackedIDFA: Swift.String?
  final public var metaData: [Swift.String : Any]
  public init()
  public init(from decoder: any Swift.Decoder) throws
  final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MoEngageRemoteAnalyticsConfig : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible {
  final public let sessionInActiveDuration: Swift.Int
  final public let sourceIdentifiers: Swift.Set<Swift.String>
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol MoEngageNetworkSessionProtocol : AnyObject {
  var sdkInstance: MoEngageCore.MoEngageSDKInstance! { get }
  var configuration: Foundation.URLSessionConfiguration { get }
  func add(delegates: [any MoEngageCore.MoEngageNetworkSessionDelegate])
  func add(preProcessors: [any MoEngageCore.MoEngageNetworkPreProcessor])
  func add(postProcessors: [any MoEngageCore.MoEngageNetworkPostProcessor])
  func dataTask(with request: MoEngageCore.MoEngageNetworkRequest, completionHandler: @escaping (MoEngageCore.MoEngageNetworkRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
  func downloadTask(with request: MoEngageCore.MoEngageNetworkRequest, completionHandler: @escaping (MoEngageCore.MoEngageNetworkDownloadRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
  func downloadTask(with url: Foundation.URL, completionHandler: @escaping (MoEngageCore.MoEngageNetworkDownloadRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
}
extension MoEngageCore.MoEngageNetworkSessionProtocol {
  public func dataTask(with url: Foundation.URL, completionHandler: @escaping (MoEngageCore.MoEngageNetworkRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
  public func downloadTask(with url: Foundation.URL, completionHandler: @escaping (MoEngageCore.MoEngageNetworkDownloadRequestResult) -> Swift.Void) -> any MoEngageCore.MoEngageNetworkTask
}
public enum MoEngageNetworkSessionAuthChallengeDisposition {
  case useCredential(Foundation.URLCredential)
  case performDefaultHandling
  case cancelAuthenticationChallenge
  case rejectProtectionSpace
}
public enum MoEngageNetworkRequestResult {
  case success(Foundation.HTTPURLResponse, Foundation.Data, MoEngageCore.MoEngageNetworkRequest)
  case systemError(any Swift.Error, MoEngageCore.MoEngageNetworkRequest)
  case httpError(Foundation.HTTPURLResponse, Foundation.Data?, MoEngageCore.MoEngageNetworkRequest)
  case unknown(Foundation.URLResponse?, Foundation.Data?, MoEngageCore.MoEngageNetworkRequest)
}
public enum MoEngageNetworkDownloadRequestResult {
  case success(Foundation.HTTPURLResponse, Foundation.URL, MoEngageCore.MoEngageNetworkRequest)
  case systemError(any Swift.Error, MoEngageCore.MoEngageNetworkRequest)
  case httpError(Foundation.HTTPURLResponse, Foundation.URL?, MoEngageCore.MoEngageNetworkRequest)
  case unknown(Foundation.URLResponse?, Foundation.URL?, MoEngageCore.MoEngageNetworkRequest)
}
@objc @_hasMissingDesignatedInitializers public class MoEngageRemoteRealTimeTriggerConfig : ObjectiveC.NSObject, MoEngageCore.MoEngageDictionaryConvertible {
  final public let syncInterval: Swift.Int
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol MoEngageNetworkTaskDelegate {
  func urlSession(didCreateTask task: any MoEngageCore.MoEngageNetworkTask)
  func urlSession(didCompleteTask task: any MoEngageCore.MoEngageNetworkTask)
}
@objc public enum MoEngageSDKState : Swift.Int {
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class MoEngageInAppConfig : ObjectiveC.NSObject {
  public init(safeAreaInset: CoreFoundation.CGFloat)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol MoEngageGifDelegate {
  @objc optional func gifDidStart(sender: UIKit.UIImageView)
  @objc optional func gifDidLoop(sender: UIKit.UIImageView)
  @objc optional func gifDidStop(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFinish(sender: UIKit.UIImageView)
  @objc optional func gifURLDidFail(sender: UIKit.UIImageView, url: Foundation.URL, error: (any Swift.Error)?)
}
@objc public enum MoEngageNetworkService : Swift.Int {
  case GetConfig = 0
  case Initialize
  case SendReports
  case InAppMetaFetch
  case InAppGetPayload
  case InAppGetTestPayload
  case InAppSendStats
  case InboxFetch
  case SendCategories
  case RealTimeTriggersFetch
  case CheckUserInSegment
  case GeofenceHit
  case GeofencesFetch
  case CardsFetch
  case CardsDelete
  case CardsUserActivity
  case CrashLake
  case register
  case unregister
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias completionHandler = ((Swift.Bool, [Swift.AnyHashable : Any]?) -> Swift.Void)
public typealias completionHandlerWithResponseCode = ((Swift.Bool, Swift.Int, [Swift.AnyHashable : Any]?) -> Swift.Void)
public typealias dataCompletionHandler = ((Swift.Bool, Foundation.Data?) -> Swift.Void)
public typealias richNotificationCompletionHandler = ((_ tempURL: Foundation.URL?) -> Swift.Void)
@objc @_inheritsConvenienceInitializers open class MoEngageCardsHandler : ObjectiveC.NSObject {
  @objc required override dynamic public init()
  open func logout(onUserReset: Swift.Bool = true, sdkInstance: MoEngageCore.MoEngageSDKInstance, onCompleted: @escaping () -> Swift.Void)
  open func updateModule(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func initializeCards(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func applicationWillBecomeInActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  open func removeCardsDataFromStorage(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc deinit
}
public struct MoEngageDeviceEntryUtils {
  public static func getNewDeviceEntryRequestBody(sdkInstance: MoEngageCore.MoEngageSDKInstance, withCompletionHandler completionHandler: @escaping ([Swift.String : Any]?, Swift.String?) -> Swift.Void)
  public static func getDevicePreferences(sdkInstance: MoEngageCore.MoEngageSDKInstance, forOnlyOptOutStatus onlyOptout: Swift.Bool) -> [Swift.String : Swift.Bool]?
}
extension MoEngageCore.MoEngageAsyncOperation.State : Swift.Equatable {}
extension MoEngageCore.MoEngageAsyncOperation.State : Swift.Hashable {}
extension MoEngageCore.MoEngageAsyncOperation.State : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageInAppWhiteList : Swift.Equatable {}
extension MoEngageCore.MoEngageInAppWhiteList : Swift.Hashable {}
extension MoEngageCore.MoEngageInAppWhiteList : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageRegistrationResult : Swift.Equatable {}
extension MoEngageCore.MoEngageRegistrationResult : Swift.Hashable {}
extension MoEngageCore.MoEngageRegistrationResult : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageNetworkTaskType : Swift.Equatable {}
extension MoEngageCore.MoEngageNetworkTaskType : Swift.Hashable {}
extension MoEngageCore.MoEngageRegistrationType : Swift.Equatable {}
extension MoEngageCore.MoEngageRegistrationType : Swift.Hashable {}
extension MoEngageCore.MoEngageRegistrationType : Swift.RawRepresentable {}
extension MoEngageCore.MoEngagePartnerIntegrationType : Swift.Equatable {}
extension MoEngageCore.MoEngagePartnerIntegrationType : Swift.Hashable {}
extension MoEngageCore.MoEngagePartnerIntegrationType : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageExceptions : Swift.Equatable {}
extension MoEngageCore.MoEngageExceptions : Swift.Hashable {}
extension MoEngageCore.MoEngageLoggerType : Swift.Equatable {}
extension MoEngageCore.MoEngageLoggerType : Swift.Hashable {}
extension MoEngageCore.MoEngageLoggerType : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageRegistrationState : Swift.Equatable {}
extension MoEngageCore.MoEngageRegistrationState : Swift.Hashable {}
extension MoEngageCore.MoEngageRegistrationState : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageDataCenter : Swift.Equatable {}
extension MoEngageCore.MoEngageDataCenter : Swift.Hashable {}
extension MoEngageCore.MoEngageDataCenter : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageSDKState : Swift.Equatable {}
extension MoEngageCore.MoEngageSDKState : Swift.Hashable {}
extension MoEngageCore.MoEngageSDKState : Swift.RawRepresentable {}
extension MoEngageCore.MoEngageNetworkService : Swift.Equatable {}
extension MoEngageCore.MoEngageNetworkService : Swift.Hashable {}
extension MoEngageCore.MoEngageNetworkService : Swift.RawRepresentable {}
