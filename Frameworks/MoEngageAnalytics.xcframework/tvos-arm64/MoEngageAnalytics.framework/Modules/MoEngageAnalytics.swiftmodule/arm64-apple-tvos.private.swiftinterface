// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-tvos11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MoEngageAnalytics
import CommonCrypto
import Foundation
import MoEngageCore
import MoEngageObjCUtils
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum MoEngageUserGender : Swift.Int {
  case male = 0
  case female
  case others
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MoEngageAppStatus : Swift.Int {
  case install = 0
  case update
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MoEngageAnalyticsUtils {
  public class func getIDFA() -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MoEngageAnalyticsDelegateHandler : MoEngageCore.MoEngageAnalyticsDelegate, MoEngageObjCUtils.MoEngageAppDelegateAnalyticsProxyProtocol {
  public static var sharedInstance: MoEngageAnalytics.MoEngageAnalyticsDelegateHandler?
  override public func initializeAnalytics(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  @objc public func handleOpenURL(_ url: Foundation.URL)
  override public func moengageSDKStateUpdated(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationDidBecomeActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationWillResignActive(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationDidEnterForeground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func applicationDidEnterBackground(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func flush(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  public static func trackEventForRichNotification(name: Swift.String, properties: MoEngageAnalytics.MoEngageProperties? = nil, appID: Swift.String? = nil, completionBlock: (() -> Swift.Void)? = nil)
  override public func migrateDataFromPreviousVersions(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func migrateDataFromNoNEncryptionToEncryption(sdkInstance: MoEngageCore.MoEngageSDKInstance, currentSDKInstance: MoEngageCore.MoEngageSDKInstance)
  override public func removeEncryptedFolder(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func resetDataAfterUnRegistration(sdkInstance: MoEngageCore.MoEngageSDKInstance)
  override public func syncExistingDataBeforeUnRegisteration(sdkInstance: MoEngageCore.MoEngageSDKInstance, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
@objc public protocol MoEngageAnalyticsCallBack {
  @objc optional func didLogOut(from accountMeta: MoEngageCore.MoEngageAccountMeta)
}
@_inheritsConvenienceInitializers @objc public class MoEngageSDKAnalytics : ObjectiveC.NSObject {
  @objc public static let sharedInstance: MoEngageAnalytics.MoEngageSDKAnalytics
  @objc public func trackSDKVersion()
  @objc public func updateSessionSource(withPushPayload payload: [Swift.AnyHashable : Any], fromMoEngage isMoEngagePush: Swift.Bool)
  @objc public func updateSessionSource(withURL url: Foundation.URL)
  @objc public func pushTokenUpdated(appId: Swift.String)
  @objc public func appStatus(_ appStatus: MoEngageAnalytics.MoEngageAppStatus, forAppID appID: Swift.String? = nil)
  @objc public func trackEvent(_ name: Swift.String, withProperties properties: MoEngageAnalytics.MoEngageProperties? = nil)
  @objc public func trackEvent(_ name: Swift.String, withProperties properties: MoEngageAnalytics.MoEngageProperties? = nil, forAppID appID: Swift.String? = nil)
  @objc public func flush(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func flush()
  @objc public func flush(forAppID appID: Swift.String? = nil)
  @objc public func flush(withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func flushRichNotificationEvents(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func setUserAttribute(_ value: Any?, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttribute(_ value: Any?, withAttributeName attributeName: Swift.String)
  @objc public func setUserAttributeEpochTime(_ dateEpoch: Swift.Double, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeEpochTime(_ dateEpoch: Swift.Double, withAttributeName attributeName: Swift.String)
  @objc public func setUserAttributeDate(_ date: Foundation.Date, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeDate(_ date: Foundation.Date, withAttributeName attributeName: Swift.String)
  @objc public func setUserAttributeISODate(_ dateString: Swift.String, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUserAttributeISODate(_ dateString: Swift.String, withAttributeName attributeName: Swift.String)
  @objc public func setLocation(_ location: MoEngageAnalytics.MoEngageGeoLocation, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setLocation(_ location: MoEngageAnalytics.MoEngageGeoLocation, withAttributeName attributeName: Swift.String)
  @objc public func setAlias(_ alias: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setAlias(_ alias: Swift.String)
  @objc public func setUniqueID(_ uniqueID: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setUniqueID(_ uniqueID: Swift.String)
  @objc public func setEmailID(_ emailID: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setEmailID(_ emailID: Swift.String)
  @objc public func setName(_ userName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setName(_ userName: Swift.String)
  @objc public func setFirstName(_ firstName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setFirstName(_ firstName: Swift.String)
  @objc public func setLastName(_ lastName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setLastName(_ lastName: Swift.String)
  @objc public func setMobileNumber(_ mobileNum: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setMobileNumber(_ mobileNum: Swift.String)
  @objc public func setGender(_ gender: MoEngageAnalytics.MoEngageUserGender, forAppID appID: Swift.String? = nil)
  @objc public func setGender(_ gender: MoEngageAnalytics.MoEngageUserGender)
  @objc public func setDateOfBirth(_ dob: Foundation.Date, forAppID appID: Swift.String? = nil)
  @objc public func setDateOfBirth(_ dob: Foundation.Date)
  @objc public func setDateOfBirthInISO(_ dateString: Swift.String, forAppID appID: Swift.String? = nil)
  @objc public func setDateOfBirthInISO(_ dateString: Swift.String)
  @objc public func setLocation(_ location: MoEngageAnalytics.MoEngageGeoLocation, forAppID appID: Swift.String? = nil)
  @objc public func setLocation(_ location: MoEngageAnalytics.MoEngageGeoLocation)
  @objc public func trackUserPushPreference(_ isPushEnabled: Swift.Bool, forAppID appID: Swift.String? = nil)
  @objc public func trackLocale()
  @objc public func trackLocale(forAppID appID: Swift.String? = nil)
  @objc public func resetUser(forAppID appID: Swift.String? = nil, withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func resetUser()
  @objc public func resetUser(withCompletionBlock completionBlock: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func resetUser(forAppID appID: Swift.String? = nil)
  @objc public func enableDataTracking(forAppID appID: Swift.String? = nil)
  @objc public func enableDataTracking()
  @objc public func disableDataTracking(forAppID appID: Swift.String? = nil)
  @objc public func disableDataTracking()
  @objc public func enableIDFATracking(forAppID appID: Swift.String? = nil)
  @objc public func enableIDFATracking()
  @objc public func disableIDFATracking(forAppID appID: Swift.String? = nil)
  @objc public func disableIDFATracking()
  @objc public func enableIDFVTracking(forAppID appID: Swift.String? = nil)
  @objc public func enableIDFVTracking()
  @objc public func disableIDFVTracking(forAppID appID: Swift.String? = nil)
  @objc public func disableIDFVTracking()
  @objc public func processURL(_ url: Foundation.URL?)
  @objc public func setDelegate(delegate: any MoEngageAnalytics.MoEngageAnalyticsCallBack, forAppID appID: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MoEngageAnalyticsSource {
  public init(withSourceInfoDict infoDict: [Swift.AnyHashable : Any], andInstanceID instanceID: Swift.String, withConfigController configController: MoEngageCore.MoEngageSDKInstance)
  public init(withURL urlStr: Swift.String, andInstanceID instanceID: Swift.String, withConfigController configController: MoEngageCore.MoEngageSDKInstance)
  public func isValidSource() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MoEngageAnalyticsHandler : ObjectiveC.NSObject {
  @objc public static func setUserAttributeBool(_ value: Swift.Bool, withAttributeName attributeName: Swift.String, forAppID appID: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MoEngageProperties : ObjectiveC.NSObject {
  @objc public init(withAttributes attributesDict: [Swift.String : Any]? = nil)
  @objc public func updateAttributes(withPluginPayload payloadDict: [Swift.String : Any]?)
  @objc public func addAttribute(_ attrVal: Any?, withName attrName: Swift.String)
  @objc public func addLocationAttribute(_ attrVal: MoEngageAnalytics.MoEngageGeoLocation, withName attrName: Swift.String)
  @objc public func addDateAttribute(_ attrVal: Foundation.Date, withName attrName: Swift.String)
  @objc public func addDateISOStringAttribute(_ dateString: Swift.String, withName attrName: Swift.String)
  @objc public func addDateEpochAttribute(_ epoch: Swift.Double, withName attrName: Swift.String)
  @objc public func setNonInteractive()
  @objc deinit
}
@objc public class MoEngageGeoLocation : ObjectiveC.NSObject {
  @objc public var latitude: Swift.Double
  @objc public var longitude: Swift.Double
  @objc public init(withLatitude lat: Swift.Double, andLongitude lng: Swift.Double)
  @objc deinit
}
extension MoEngageAnalytics.MoEngageUserGender : Swift.Equatable {}
extension MoEngageAnalytics.MoEngageUserGender : Swift.Hashable {}
extension MoEngageAnalytics.MoEngageUserGender : Swift.RawRepresentable {}
extension MoEngageAnalytics.MoEngageAppStatus : Swift.Equatable {}
extension MoEngageAnalytics.MoEngageAppStatus : Swift.Hashable {}
extension MoEngageAnalytics.MoEngageAppStatus : Swift.RawRepresentable {}
